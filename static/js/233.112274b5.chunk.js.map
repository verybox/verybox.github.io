{"version":3,"file":"static/js/233.112274b5.chunk.js","mappings":"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","sources":["helper/rpc.js","views/chaintools/RPCNodes.js"],"sourcesContent":["'use strict';\nconst Web3 = require('web3');\nexport default function checkRPC(rpc){\n    const web3 = new Web3(new Web3.providers.HttpProvider(rpc));\n    const startTime = Date.now();//毫秒级事件戳\n    //console.log('startTime',startTime)\n    const result = web3.eth.getChainId().then((e)=>{      \n      return Date.now() - startTime  \n    })\n    .catch((e)=>{\n        return false\n    })\n    return result\n}","/*\r\n * @Author: craig smith\r\n * @Date: 2022-11-02 16:43:17\r\n * @LastEditTime: 2022-11-04 11:19:46\r\n * @FilePath: \\berry\\src\\views\\chaintools\\RPCNodes.js\r\n * @Description: \r\n */\r\nimport React, { useState,useEffect } from \"react\"\r\n\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nimport {Grid,Button,TextField} from '@mui/material'\r\nimport MuiTypography from '@mui/material/Typography'\r\nimport Divider from '@mui/material/Divider'\r\n\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport checkRPC  from  'helper/rpc'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nfunction RPCNodes() {\r\n  const { t } = useTranslation()\r\n  const theme = useTheme()\r\n  const rpcNodesList = [\r\n    'https://geth.mytokenpocket.vip',\r\n    'https://rpc.ankr.com/eth',\r\n    'https://mainnet-eth.compound.finance',\r\n    'https://api.mycryptoapi.com/eth',\r\n    'https://cloudflare-eth.com',\r\n    'https://api.mycryptoapi.com/eth',\r\n    'https://rpc.flashbots.net/',\r\n    'https://eth-mainnet.nodereal.io/v1/1659dfb40aa24bbb8153a677b98064d7',\r\n    'https://eth-mainnet.gateway.pokt.network/v1/5f3453978e354ab992c4da79'\r\n  ]\r\n\r\n  const [rpcNodesListDom, setRPCNodesListDom] = useState([])\r\n  const [checkResult, setCheckResult] = useState([\r\n    'Mytokenpocket\\'s http node',\r\n    'Ankr\\'s http node',\r\n    'Compound\\'s http node',\r\n    'Mycryptoapi\\'s http node',\r\n    'Cloudflare-eth\\'s http node',\r\n    'MyCrypto\\'s http node',\r\n    'Flashbots\\'s http node',\r\n    'Nodereal\\'s http node',\r\n    'Pocket Network\\'s http node'                \r\n  ])\r\n\r\n  const ParseRPCNodesDom = ((rpcNodesList)=>{\r\n    let newRpcNodesList = []\r\n    for(let i = 0; i < rpcNodesList.length; i++){\r\n      newRpcNodesList.push(\r\n        <Grid container  key = {`d_${i}`} sx = {{my:1}}>         \r\n          <Grid item xs = {12} sm = {6} key = {`d_${i}`} sx = {{my:1}}>        \r\n            <TextField\r\n              fullWidth\r\n              id={`dd_${i}` }\r\n              variant=\"outlined\"  \r\n              size=\"small\" \r\n              value={rpcNodesList[i]}\r\n              helperText={checkResult[i]}\r\n            />\r\n          </Grid>\r\n          <Grid item xs = {3} key = {`ddd_${i}`} sx = {{my:1}}>        \r\n            <Button \r\n              sx={{mx:1,borderRadius:30}} \r\n              id={`dddd_${i}` } \r\n              variant=\"outlined\" \r\n              size=\"large\" \r\n              value = {rpcNodesList[i]} \r\n              onClick={chkRPCAction} \r\n            >\r\n             {t('rpcNodes.txtCheckButton')} \r\n            </Button>\r\n          </Grid>          \r\n        </Grid>        \r\n      )\r\n    }\r\n    setRPCNodesListDom(newRpcNodesList)    \r\n  }) \r\n\r\n  const chkRPCAction = (e) => {\r\n    const index = (e.target.id).replace('dddd_','')\r\n    chkRPC(index,e.target.value)\r\n  }\r\n\r\n  \r\n  const chkRPC = (index,value) => {\r\n    setCheckResult((prev)=>{\r\n      let newCheckResult = [...prev]\r\n      newCheckResult[index] = <span>{`checking...`}</span> \r\n      return newCheckResult\r\n    })\r\n    //check connect\r\n    checkRPC(value).then((responseTime) =>{\r\n      ////console.log('responseTime//',responseTime)\r\n      setCheckResult((prev)=>{\r\n        let newCheckResult = [...prev] \r\n        if(responseTime == false){\r\n          newCheckResult[index] = <span style={{color:theme.palette.error.dark}}>{`Connect fail`}</span>\r\n         }else{\r\n            newCheckResult[index] = <span \r\n               style={{color:responseTime > 1000 ? theme.palette.orange.dark : theme.palette.success.dark}}>\r\n              {`Response：${responseTime} mm`}\r\n            </span>         \r\n         } \r\n        return newCheckResult\r\n      })\r\n      ////console.log(checkResult)    \r\n    })\r\n  };\r\n\r\n\r\n  const chkAllRPC = () => {\r\n    for(let i = 0;i < rpcNodesList.length; i++){\r\n      chkRPC(i,rpcNodesList[i])\r\n    }\r\n  };  \r\n  \r\n  useEffect(() => {\r\n    ParseRPCNodesDom( rpcNodesList )\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    ParseRPCNodesDom( rpcNodesList )\r\n  },[checkResult])\r\n  return (\r\n    <MainCard \r\n      title={t('rpcNodes.title')} \r\n      secondary={\r\n        <Grid item xs={6} style={{textAlign:'right',verticalAlign:'middle',paddingTop:6,paddingBottom:6}}>\r\n          <Button sx={{mx:1,borderRadius:10}} variant=\"outlined\" size=\"small\" onClick={chkAllRPC} >{t('rpcNodes.txtCheckAllButton')}</Button>                                  \r\n        </Grid> \r\n      }\r\n      >   \r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n             <Grid container spacing={2}>\r\n                <Grid item>\r\n                {t('rpcNodes.txt1')}  \r\n                </Grid>            \r\n              </Grid>              \r\n             \r\n            </Grid>                 \r\n            <Grid item xs={12}>\r\n              <Grid item xs={12}>\r\n                {rpcNodesListDom}              \r\n              </Grid>              \r\n            </Grid>                                             \r\n        </Grid> \r\n        <Divider sx = {{mt:2,mb:3}}/>\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Grid container spacing={2}>\r\n                  <Grid item>\r\n                   <MuiTypography variant=\"h5\" gutterBottom>\r\n                   {t('rpcNodes.txt2')}  <a  \r\n                      href = 'https://infura.io/' \r\n                      target=\"_blank\"\r\n                      style={{ \r\n                        textDecoration: 'none',\r\n                        color: theme.palette.secondary.dark\r\n                      }}>\r\n                      https://infura.io/\r\n                    </a>\r\n                    </MuiTypography>                    \r\n                  </Grid>\r\n                  <Grid item>\r\n                  {t('rpcNodes.txt3')} \r\n                  </Grid>                \r\n                  <Grid item>\r\n                  <MuiTypography variant=\"h5\" gutterBottom>                    \r\n                      <a  \r\n                        href = 'https://www.alchemy.com/' \r\n                        target=\"_blank\"\r\n                        style={{ \r\n                          textDecoration: 'none',\r\n                          color: theme.palette.secondary.dark\r\n                        }}>\r\n                        https://www.alchemy.com/\r\n                      </a>\r\n                    </MuiTypography>  \r\n                  </Grid>            \r\n                </Grid>                           \r\n              </Grid>                                                                       \r\n      </Grid>          \r\n    </MainCard>  \r\n  );\r\n}\r\n\r\nexport default RPCNodes;"],"names":["Web3","require","checkRPC","rpc","web3","providers","HttpProvider","startTime","Date","now","eth","getChainId","then","e","catch","t","useTranslation","theme","useTheme","rpcNodesList","rpcNodesListDom","setRPCNodesListDom","useState","checkResult","setCheckResult","ParseRPCNodesDom","newRpcNodesList","i","length","push","container","sx","my","item","xs","sm","fullWidth","id","variant","size","value","helperText","mx","borderRadius","onClick","chkRPCAction","index","target","replace","chkRPC","prev","newCheckResult","responseTime","style","color","palette","error","dark","orange","success","useEffect","title","secondary","textAlign","verticalAlign","paddingTop","paddingBottom","spacing","mt","mb","gutterBottom","href","textDecoration"],"sourceRoot":""}