{"version":3,"file":"static/js/364.96488aa3.chunk.js","mappings":"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","sources":["views/chaintools/GenerateAddress.js"],"sourcesContent":["'use strict';\r\nimport React, { useState } from \"react\";\r\n\r\nimport {Grid,Button,TextField} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard'\r\n\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nconst secp256k1 = require(\"secp256k1/elliptic\");\r\nconst createKeccakHash = require(\"keccak\");\r\nconst crypto = require('crypto');\r\n\r\n/*   \r\n使用nodeJs生成以太坊HD钱包地址\r\nvar bip39 = require('bip39')\r\nvar hdkey = require('ethereumjs-wallet/hdkey')\r\nvar util = require('ethereumjs-util')\r\n\r\nvar mnemonic = bip39.generateMnemonic()\r\nvar seed = bip39.mnemonicToSeed(mnemonic)\r\nvar hdWallet = hdkey.fromMasterSeed(seed)\r\nvar key1 = hdWallet.derivePath(\"m/44'/60'/0'/0/0\")\r\n//console.log(key1)\r\nvar address1 = util.pubToAddress(key1._hdkey._publicKey, true)\r\n//console.log(address1)\r\naddress1 = util.toChecksumAddress(address1.toString('hex'))\r\n//console.log(address1) */\r\n\r\nfunction GenerateAddress() {\r\n    const { t } = useTranslation()\r\n    const [addressNum, setAddressNum] = useState(10);\r\n    const [addressArr, setAddressArr] = useState([]);\r\n    const [pkArr, setPkArr] = useState([]);     \r\n    const [addressArrStr, setAddressArrStr] = useState('');        \r\n    const setAddressNumAction = (e) => {\r\n        let val = e.target.value.replace(/[^\\d]/, '')\r\n        val = removeLeadingZeros(val);\r\n        setAddressNum(val);\r\n        // if(isNumber(parseInt(event.target.value) )){\r\n        //     setAddressNum(parseInt(event.target.value));\r\n        // }else{\r\n        //     alert('Please enter number.')\r\n        // }\r\n\r\n    };\r\n\r\n    const isNumber = (obj)=> {\r\n        return obj === +obj\r\n    }\r\n\r\n    const removeLeadingZeros = (s) => {\r\n        const oldLen = s.length;\r\n        s = s.replace(/^0+/, ''); // 移除前导零\r\n        // 全为 0 的情况，留一个 0\r\n        if (s.length === 0 && oldLen > 0) {\r\n          s = '0';\r\n        }\r\n        return s;\r\n      }    \r\n\r\n    const generate = (event) => {\r\n        //console.log('Generator Start..............');\r\n        setAddressArr([])\r\n        setPkArr([])        \r\n        setAddressArrStr('')\r\n        let addressArrTmp = []\r\n        let pkArrTmp = []        \r\n        for (var i = 0; i < addressNum; i++) {\r\n            // 生成私钥\r\n            const privateKey = crypto.randomBytes(32);\r\n            // 生成公钥\r\n            const publicKey = secp256k1.publicKeyCreate(privateKey, false).slice(1);\r\n            //const publicKey = Uint8ArrayToString(secp256k1.publicKeyCreate(privateKey, false).slice(1));\r\n            //console.log(publicKey);\r\n            // 生成地址\r\n            const address = createKeccakHash(\"keccak256\").update(Buffer.from(publicKey)).digest().slice(-20);\r\n            const normAddress = toChecksumAddress(address.toString('hex'));\r\n            // 查看结果\r\n            //console.log(normAddress+\"////\"+privateKey.toString('hex'));\r\n            //const addressStr = normAddress+\"////\"+privateKey.toString('hex')\r\n            addressArrTmp.push(normAddress)\r\n            pkArrTmp.push(privateKey.toString('hex'))                                     \r\n        }  \r\n        //console.log('addressArrTmp',addressArrTmp) \r\n        setAddressArr(addressArrTmp)\r\n        setPkArr(pkArrTmp)        \r\n        buildAddressString(addressArrTmp,pkArrTmp)         \r\n        //console.log('work finished!')\r\n        //console.log('addressArrStr',addressArrStr)        \r\n    }; \r\n      \r\n    // 地址转换\r\n    function toChecksumAddress(address) {\r\n        address = address.toLowerCase().replace('0x', '');\r\n        var hash = createKeccakHash('keccak256').update(address).digest('hex');\r\n        var ret = '0x';\r\n        for (var i = 0; i < address.length; i++) {\r\n        if (parseInt(hash[i], 16) >= 8) {\r\n        ret += address[i].toUpperCase();\r\n        } else {\r\n        ret += address[i];\r\n        }\r\n        }\r\n        return ret;\r\n    } \r\n    \r\n    const buildAddressString = (addressArr,pkArr) =>{\r\n        //console.log('addressArr',addressArr)\r\n        let addressArrStrTmp = ''\r\n        addressArr.forEach(( address,index ) => {\r\n            addressArrStrTmp = addressArrStrTmp + address + '/////' + pkArr[index] +'\\n'            \r\n        });\r\n        setAddressArrStr(addressArrStrTmp)\r\n    }\r\n\r\n    function fake_click(obj) {\r\n        var ev = document.createEvent(\"MouseEvents\");\r\n        ev.initMouseEvent(\r\n            \"click\", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null\r\n        );\r\n        obj.dispatchEvent(ev);\r\n    }\r\n    \r\n    function download(name, data) {\r\n        var urlObject = window.URL || window.webkitURL || window;\r\n    \r\n        var downloadData = new Blob([data]);\r\n    \r\n        var save_link = document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\r\n        save_link.href = urlObject.createObjectURL(downloadData);\r\n        save_link.download = name;\r\n        fake_click(save_link);\r\n    }\r\n\r\n    //下载\r\n    const downloadWallet = (event) => {\r\n        let strTmp = ''\r\n        addressArr.forEach(( address ) => {\r\n            strTmp = strTmp + '{' + address + '}'+'\\n'            \r\n        });      \r\n        download(event.target.value,strTmp);        \r\n    }\r\n\r\n    const downloadpkey = (event) => {\r\n        let strTmp = ''\r\n        pkArr.forEach(( pk ) => {\r\n            strTmp = strTmp + pk +'\\n'            \r\n        });      \r\n        download(event.target.value,strTmp);        \r\n    }\r\n\r\n    const downloadwallet_pkey = (event) => {\r\n        let strTmp = ''\r\n        addressArr.forEach(( address,index ) => {\r\n            strTmp = strTmp + address + '/////' + pkArr[index] +'\\n'            \r\n        });      \r\n        download(event.target.value,strTmp);        \r\n    }  \r\n    \r\n    const clearTxt = (event) => {\r\n      setAddressArrStr('');        \r\n    }    \r\n     \r\n    return (  \r\n      <MainCard \r\n        title={t('generateaddress.title')}> \r\n        <Grid container spacing={2}>      \r\n            <Grid item xs={12} style={{marginTop:10, marginBottomr:1,mt:10}}>            \r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={6}>\r\n                    <TextField \r\n                        id=\"addressNum\" \r\n                        label={t('generateaddress.amount')} \r\n                        variant=\"outlined\"  \r\n                        size=\"small\" \r\n                        value={addressNum}\r\n                        type=\"number\"\r\n                        onChange={setAddressNumAction}              \r\n                        />                   \r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button  \r\n                        variant=\"outlined\" \r\n                        onClick={generate} \r\n                        sx={{mr:1,mt:1,borderRadius:50}}\r\n                        >\r\n                            {t('generateaddress.generate')}\r\n                        </Button>\r\n\r\n                        <Button  \r\n                        variant=\"outlined\" \r\n                        value = 'wallet.txt' \r\n                        onClick={downloadWallet} \r\n                        sx={{mr:1,mt:1,borderRadius:50}}\r\n                        >\r\n                            {t('generateaddress.saveAddress')}\r\n                        </Button>\r\n\r\n                        <Button  \r\n                        variant=\"outlined\" \r\n                        value = 'pkey.txt'  \r\n                        onClick={downloadpkey} \r\n                        sx={{mr:1,mt:1,borderRadius:50}}\r\n                        >\r\n                            {t('generateaddress.saveKey')}\r\n                        </Button>\r\n\r\n                        <Button  \r\n                        variant=\"outlined\" \r\n                        value = 'wallet_pkey.txt'   \r\n                        onClick={downloadwallet_pkey} \r\n                        sx={{mr:1,mt:1,borderRadius:50}}\r\n                        >\r\n                            {t('generateaddress.saveBoth')}\r\n                        </Button>\r\n                        \r\n                        <Button  \r\n                        variant=\"outlined\" \r\n                        value = 'wallet_pkey.txt'   \r\n                        onClick={clearTxt} \r\n                        sx={{mr:1,mt:1,borderRadius:50}}\r\n                        >\r\n                            {t('generateaddress.clear')}\r\n                        </Button>                \r\n                    </Grid>                \r\n\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={10} style={{marginTop:10, marginBottomr:1,mt:10}}>\r\n                <TextField\r\n                style = {{fontSize:6}}\r\n                fullWidth\r\n                id=\"pk\"\r\n                label={t('generateaddress.walletList')}\r\n                multiline\r\n                rows={16}\r\n                disabled\r\n                size='small'\r\n                value={addressArrStr}\r\n            />\r\n            </Grid>        \r\n        </Grid> \r\n      </MainCard>  \r\n    );\r\n  }\r\n  \r\n  export default GenerateAddress;"],"names":["secp256k1","require","createKeccakHash","crypto","t","useTranslation","addressNum","setAddressNum","useState","addressArr","setAddressArr","pkArr","setPkArr","addressArrStr","setAddressArrStr","removeLeadingZeros","s","oldLen","length","replace","toChecksumAddress","address","toLowerCase","hash","update","digest","ret","i","parseInt","toUpperCase","buildAddressString","addressArrStrTmp","forEach","index","download","name","data","urlObject","window","URL","webkitURL","downloadData","Blob","save_link","document","createElementNS","href","createObjectURL","obj","ev","createEvent","initMouseEvent","dispatchEvent","fake_click","title","container","spacing","item","xs","style","marginTop","marginBottomr","mt","id","label","variant","size","value","type","onChange","e","val","target","onClick","event","addressArrTmp","pkArrTmp","privateKey","randomBytes","publicKey","publicKeyCreate","slice","normAddress","Buffer","from","toString","push","sx","mr","borderRadius","strTmp","pk","fontSize","fullWidth","multiline","rows","disabled"],"sourceRoot":""}