{"version":3,"file":"static/js/393.1f769a7b.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/History.js","../node_modules/@mui/icons-material/Settings.js","../node_modules/@mui/material/esm/DialogTitle/DialogTitle.js","../node_modules/@mui/material/esm/FormGroup/formGroupClasses.js","../node_modules/@mui/material/esm/FormGroup/FormGroup.js","../node_modules/@mui/material/esm/RadioGroup/RadioGroup.js","../node_modules/@mui/material/esm/RadioGroup/RadioGroupContext.js","../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonUnchecked.js","../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonChecked.js","../node_modules/@mui/material/esm/Radio/RadioButtonIcon.js","../node_modules/@mui/material/esm/Radio/radioClasses.js","../node_modules/@mui/material/esm/Radio/Radio.js","../node_modules/@mui/material/esm/RadioGroup/useRadioGroup.js","../node_modules/bignumber.js/bignumber.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z\"\n}), 'History');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\n}), 'Settings');\n\nexports.default = _default;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"id\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport Typography from '../Typography';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogTitleUtilityClass } from './dialogTitleClasses';\nimport DialogContext from '../Dialog/DialogContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getDialogTitleUtilityClass, classes);\n};\n\nconst DialogTitleRoot = styled(Typography, {\n  name: 'MuiDialogTitle',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  padding: '16px 24px',\n  flex: '0 0 auto'\n});\nconst DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogTitle'\n  });\n\n  const {\n    className,\n    id: idProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  const {\n    titleId: id = idProp\n  } = React.useContext(DialogContext);\n  return /*#__PURE__*/_jsx(DialogTitleRoot, _extends({\n    component: \"h2\",\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    variant: \"h6\",\n    id: id\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogTitle;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getFormGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiFormGroup', slot);\n}\nconst formGroupClasses = generateUtilityClasses('MuiFormGroup', ['root', 'row', 'error']);\nexport default formGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"row\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getFormGroupUtilityClass } from './formGroupClasses';\nimport useFormControl from '../FormControl/useFormControl';\nimport formControlState from '../FormControl/formControlState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    row,\n    error\n  } = ownerState;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getFormGroupUtilityClass, classes);\n};\n\nconst FormGroupRoot = styled('div', {\n  name: 'MuiFormGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.row && styles.row];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  flexDirection: 'column',\n  flexWrap: 'wrap'\n}, ownerState.row && {\n  flexDirection: 'row'\n}));\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n */\n\nconst FormGroup = /*#__PURE__*/React.forwardRef(function FormGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormGroup'\n  });\n\n  const {\n    className,\n    row = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['error']\n  });\n\n  const ownerState = _extends({}, props, {\n    row,\n    error: fcs.error\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(FormGroupRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display group of elements in a compact row.\n   * @default false\n   */\n  row: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default FormGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rootRef = React.useRef(null);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n\n  const handleChange = event => {\n    setValueState(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  const name = useId(nameProp);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    },\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","import * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\n\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\n\nexport default RadioGroupContext;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from '../internal/svg-icons/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '../internal/svg-icons/RadioButtonChecked';\nimport styled from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span')({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon)({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon)(({\n  theme,\n  ownerState\n}) => _extends({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  })\n}, ownerState.checked && {\n  transform: 'scale(1)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeOut,\n    duration: theme.transitions.duration.shortest\n  })\n}));\n/**\n * @ignore - internal component.\n */\n\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n\n  const ownerState = _extends({}, props, {\n    checked\n  });\n\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary']);\nexport default radioClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checked\", \"checkedIcon\", \"color\", \"icon\", \"name\", \"onChange\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport useThemeProps from '../styles/useThemeProps';\nimport RadioButtonIcon from './RadioButtonIcon';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useRadioGroup from '../RadioGroup/useRadioGroup';\nimport radioClasses, { getRadioUtilityClass } from './radioClasses';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`]\n  };\n  return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));\n};\n\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary,\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${radioClasses.checked}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  }\n}, {\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\n\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  } // The value could be a number, the DOM will stringify it anyway.\n\n\n  return String(a) === String(b);\n}\n\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\n\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\n\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  var _defaultIcon$props$fo, _defaultCheckedIcon$p;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n\n  return /*#__PURE__*/_jsx(RadioRoot, _extends({\n    type: \"radio\",\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n      fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size\n    }),\n    ownerState: ownerState,\n    classes: classes,\n    name: name,\n    checked: checked,\n    onChange: onChange,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","import * as React from 'react';\nimport RadioGroupContext from './RadioGroupContext';\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }  \r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }  \r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }  \r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }  \r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"names":["_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","_excluded","DialogTitleRoot","styled","Typography","name","slot","overridesResolver","props","styles","root","padding","flex","DialogTitle","React","inProps","ref","useThemeProps","className","id","idProp","other","_objectWithoutPropertiesLoose","ownerState","classes","composeClasses","getDialogTitleUtilityClass","useUtilityClasses","titleId","DialogContext","_jsx","_extends","component","clsx","variant","getFormGroupUtilityClass","generateUtilityClass","generateUtilityClasses","FormGroupRoot","row","display","flexDirection","flexWrap","muiFormControl","useFormControl","fcs","formControlState","states","error","slots","actions","children","defaultValue","nameProp","onChange","value","valueProp","rootRef","setValueState","useControlled","controlled","focus","input","current","querySelector","handleRef","useForkRef","useId","RadioGroupContext","event","target","FormGroup","role","undefined","createSvgIcon","RadioButtonIconRoot","position","RadioButtonIconBackground","RadioButtonUncheckedIcon","transform","RadioButtonIconDot","RadioButtonCheckedIcon","theme","left","transition","transitions","create","easing","easeIn","duration","shortest","checked","easeOut","fontSize","_jsxs","background","dot","getRadioUtilityClass","RadioRoot","SwitchBase","shouldForwardProp","prop","rootShouldForwardProp","capitalize","color","vars","palette","text","secondary","backgroundColor","action","activeChannel","mainChannel","hoverOpacity","alpha","active","main","radioClasses","disabled","defaultCheckedIcon","RadioButtonIcon","defaultIcon","_defaultIcon$props$fo","_defaultCheckedIcon$p","checkedProp","checkedIcon","icon","onChangeProp","size","radioGroup","createChainedFunction","a","b","String","type","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","s","z","j","length","r","charCodeAt","slice","compare","x","y","xc","c","yc","k","e","l","intCheck","min","max","Error","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","define"],"sourceRoot":""}