{"version":3,"file":"static/js/544.a828f68c.chunk.js","mappings":"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","sources":["components/Snackbars.js","components/common/PkGroup.js","components/common/ImportPrivateKey.js","components/common/SetRPC.js","helper/SendTxAction.js","helper/rpc.js","components/common/CircularIndeterminate.js","views/nfttools/CollectNFT.js","helper/alchemyUtils.js"],"sourcesContent":["/*\r\n * @Author: craig smith\r\n * @Date: 2022-10-27 22:23:38\r\n * @LastEditTime: 2022-11-02 13:01:33\r\n * @FilePath: \\berry\\src\\components\\Snackbars.js\r\n * @Description: \r\n */\r\nimport * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nimport Slide from '@mui/material/Slide';\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\nfunction TransitionLeft(props) {\r\n  return <Slide {...props} direction=\"right\"/>;\r\n}\r\n\r\nexport default function Snackbars(props) {\r\n  const theme = useTheme()\r\n  const [snackPack, setSnackPack] = React.useState([]);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [messageInfo, setMessageInfo] = React.useState(undefined);\r\n  const [transition, setTransition] = React.useState(undefined);\r\n\r\n  React.useEffect(() => {\r\n    setTransition(() => TransitionLeft);\r\n    if (snackPack.length && !messageInfo) {\r\n      // Set a new snack when we don't have an active one\r\n      setMessageInfo({ ...snackPack[0] });\r\n      setSnackPack((prev) => prev.slice(1));\r\n      setOpen(true);\r\n    } else if (snackPack.length && messageInfo && open) {\r\n      // Close an active snack when a new one is added\r\n      setOpen(false);\r\n    }\r\n  }, [snackPack, messageInfo, open]);\r\n\r\n  const handleClick = (message) => () => {\r\n    setSnackPack((prev) => [...prev, { message, key: new Date().getTime() }]);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleExited = () => {\r\n    setMessageInfo(undefined);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    //console.log('props==>',props)\r\n    setSnackPack((prev) => [...prev, { message:props.msg, key: new Date().getTime() }]);\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{background: theme.palette.secondary.main}}>\r\n      <Snackbar\r\n        key={messageInfo ? messageInfo.key : undefined}\r\n        open={open}\r\n        autoHideDuration={4000}\r\n        onClose={handleClose}\r\n        TransitionComponent={transition}\r\n        TransitionProps={{ onExited: handleExited }}\r\n        message={messageInfo ? messageInfo.message : undefined}\r\n        action={\r\n          <React.Fragment>\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              color=\"inherit\"\r\n              sx={{ p: 0.5 }}\r\n              onClick={handleClose}\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {  useState } from \"react\";\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\n\r\nexport default function PkGroup(props) {\r\n  const [groupNumber, setGroupNumber] = useState(1);  \r\n\r\n  //button action\r\n  const setGroupNumberAction = (event) => {\r\n    const val = event.target.value\r\n    setGroupNumber(val);\r\n    props.data.setGroupAction(val)\r\n  }; \r\n\r\n  return (\r\n    <Box component=\"span\" sx={{ p: 2, border: '0px dashed grey' }}>\r\n      <Button onClick={setGroupNumberAction} value = '1' variant=\"outlined\" size=\"small\"  sx={{ px: 0, mr: 1, border: groupNumber == 1 ? '1px dashed #2196f3' : '1px dashed grey' }}>1</Button>\r\n      <Button onClick={setGroupNumberAction} value = '2'  variant=\"outlined\" size=\"small\"  sx={{ px: 0, mr: 1, border: groupNumber == 2 ? '1px dashed #2196f3' : '1px dashed grey' }} >2</Button>\r\n      <Button onClick={setGroupNumberAction} value = '3' variant=\"outlined\" size=\"small\"  sx={{ px: 0, mr: 1, border: groupNumber == 3 ? '1px dashed #2196f3' : '1px dashed grey' }}>3</Button>\r\n      <Button onClick={setGroupNumberAction} value = '4'  variant=\"outlined\" size=\"small\"  sx={{ px: 0, mr: 1, border: groupNumber == 4 ? '1px dashed #2196f3' : '1px dashed grey' }} >4</Button>\r\n      <Button onClick={setGroupNumberAction} value = '5' variant=\"outlined\" size=\"small\"  sx={{ px: 0, mr: 1, border: groupNumber == 5 ? '1px dashed #2196f3' : '1px dashed grey' }}>5</Button>    \r\n    </Box>    \r\n  );\r\n}","import React, {  useState, useEffect } from \"react\";\r\nimport {useTranslation} from 'react-i18next';\r\nimport Storage from 'helper/Storage'\r\n\r\nimport {Grid,Button,TextField,Alert} from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\n\r\nimport PkGroup from 'components/common/PkGroup';\r\n\r\nconst Input = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nlet groupNumber = 1\r\n\r\nexport default function ImportPrivateKey(props) {\r\n  const { t } = useTranslation()\r\n  const web3 = props.provider;\r\n  let storagePk = Storage.get('privateKey')\r\n  ?  \r\n    (\r\n    Storage.get('privateKey').length >  0 \r\n      ? Storage.get('privateKey') \r\n      : [{\r\n        addrStr:\"\",   \r\n        pkStr:\"\",\r\n        pkArr:[],\r\n        addrArr:[]\r\n        },{\r\n        addrStr:\"\",   \r\n        pkStr:\"\",\r\n        pkArr:[],\r\n        addrArr:[]\r\n        },{\r\n        addrStr:\"\",   \r\n        pkStr:\"\",\r\n        pkArr:[],\r\n        addrArr:[]\r\n        },{\r\n        addrStr:\"\",   \r\n        pkStr:\"\",\r\n        pkArr:[],\r\n        addrArr:[]\r\n        },{\r\n        addrStr:\"\",   \r\n        pkStr:\"\",\r\n        pkArr:[],\r\n        addrArr:[]\r\n        }\r\n      ]\r\n    )\r\n  :[{\r\n     addrStr:\"\",   \r\n     pkStr:\"\",\r\n     pkArr:[],\r\n     addrArr:[]\r\n    },{\r\n     addrStr:\"\",   \r\n     pkStr:\"\",\r\n     pkArr:[],\r\n     addrArr:[]\r\n    },{\r\n     addrStr:\"\",   \r\n     pkStr:\"\",\r\n     pkArr:[],\r\n     addrArr:[]\r\n    },{\r\n     addrStr:\"\",   \r\n     pkStr:\"\",\r\n     pkArr:[],\r\n     addrArr:[]\r\n    },{\r\n     addrStr:\"\",   \r\n     pkStr:\"\",\r\n     pkArr:[],\r\n     addrArr:[]\r\n    }\r\n  ]\r\n  //console.log('storagePk',storagePk)\r\n  const [privateKey, setPrivateKey] = useState(storagePk[0]);    \r\n  //console.log('privateKey',privateKey)\r\n  //build data\r\n  const initPrivateKey = ((privateKeyObject)=>{\r\n    setPrivateKey(privateKeyObject);\r\n    props.setPk(privateKeyObject)\r\n  })\r\n\r\n  const buildPrivateKey = ((pkStr)=>{\r\n    let pkObject = {}\r\n    const pattern = /[ABCDEFabcdef0-9]{64}/g;\r\n    let pkArr = pkStr.match(pattern);\r\n    pkObject.pkArr = pkArr ? pkArr : [];\r\n    let addrArr = []\r\n    if(pkArr){\r\n      //console.log(pkArr)\r\n      addrArr = pkArr.map((pKey)=>{\r\n        //console.log('pKey',pKey)\r\n        web3.eth.accounts.privateKeyToAccount(pKey).address\r\n        //console.log('00000',web3.eth.accounts.privateKeyToAccount(pKey).address)\r\n        return web3.eth.accounts.privateKeyToAccount(pKey).address\r\n      })      \r\n    }\r\n    pkObject.addrArr = addrArr;  \r\n    pkObject.pkStr = pkArr.join('\\r\\n');\r\n    pkObject.addrStr = addrArr.join('\\r\\n'); \r\n    //console.log('pkObject',pkObject)                       \r\n    setPrivateKey(pkObject);\r\n    storagePk[groupNumber-1] = pkObject\r\n    Storage.set('privateKey',[...storagePk])\r\n    props.setPk(pkObject)\r\n  })\r\n\r\n  //choose file to import\r\n  const inputFile =()=> {\r\n    let pkFile = document.querySelector('#pKeyFile').files[0];\r\n    if(pkFile){\r\n      var reader = new FileReader();\r\n      reader.readAsText(pkFile);\r\n      reader.onload = function(){          \r\n        buildPrivateKey(this.result);\r\n        document.querySelector('#pKeyFile').value = ''//solute the same file can not be upload twice\r\n      }\r\n    }\r\n  }  \r\n\r\n  //button action\r\n  const setPKeyAction = (event) => {\r\n    buildPrivateKey(event.target.value); \r\n  }; \r\n\r\n  //'clear' button action\r\n  const clearPKs =(()=>{\r\n    try{\r\n      let pkObject = {\r\n        addrStr:\"\",\r\n        pkStr:\"\",\r\n        pkArr:[],\r\n        addrArr:[] \r\n      }\r\n      setPrivateKey(pkObject) \r\n      storagePk[groupNumber-1] = pkObject\r\n      Storage.set('privateKey',[...storagePk])\r\n      props.setPk(pkObject)   \r\n      return\r\n    }\r\n    catch(e){\r\n      Alert(\"unknow error\")\r\n      return\r\n    }\r\n  })\r\n\r\n  const [showPK, setShowPK] = React.useState(true);\r\n  const showPKChange = (event) => {\r\n    setShowPK(event.target.checked);\r\n  };\r\n  \r\n  const setGroupAction = (val) => {\r\n    groupNumber = val    \r\n    //console.log('[+] groupNumber ',groupNumber) \r\n    const pkObject = storagePk[groupNumber-1]\r\n    setPrivateKey(pkObject) \r\n    props.setPk(pkObject)      \r\n  }; \r\n  \r\n  useEffect(() => {\r\n    //console.log('storagePk',storagePk)\r\n    initPrivateKey(storagePk[0]);\r\n\t}, []);\r\n\r\n  return (  \r\n    <Grid container spacing={2}>      \r\n      <Grid item xs={12}>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={9}>\r\n            <TextField              \r\n              style = {{fontSize:8}}\r\n              fullWidth\r\n              id=\"pk\"\r\n              label={props.title + \"(\" +  privateKey.pkArr.length + \")\"}\r\n              multiline\r\n              rows={6}\r\n              value={showPK ? privateKey.pkStr : privateKey.addrStr}\r\n              onChange={setPKeyAction}\r\n              disabled = {true}\r\n              error = {props.error}\r\n          />\r\n          </Grid> \r\n          <Grid item xs={3}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n              <label htmlFor=\"pKeyFile\">\r\n                <Input accept=\"text/*\" id=\"pKeyFile\" multiple type=\"file\" onChange={inputFile} />\r\n                <Button variant=\"outlined\" component=\"span\">\r\n                {t('importPrivateKey.import')}\r\n                </Button>\r\n              </label>\r\n              </Grid>               \r\n              <Grid item xs={12}>\r\n                <Button \r\n                  variant=\"outlined\" \r\n                  onClick={clearPKs}  \r\n                  disabled = {privateKey.pkArr.length == 0}>{t('importPrivateKey.clear')}\r\n                </Button>\r\n              </Grid>  \r\n              <Grid item xs={12}>\r\n              <FormControlLabel\r\n                label={t('importPrivateKey.showPrivateKey')}            \r\n                control={\r\n                  <Switch\r\n                    checked={showPK}\r\n                    onChange={showPKChange}\r\n                    inputProps={{ 'aria-label': 'controlled' }}\r\n                    size=\"small\"\r\n                  />\r\n                }\r\n              />\r\n              </Grid>                                                                   \r\n            </Grid>\r\n          </Grid>                          \r\n        </Grid>\r\n      </Grid>\r\n      <PkGroup data = {{setGroupAction:setGroupAction}} />\r\n    </Grid>    \r\n  );\r\n}","/*\r\n * @Author: craig smith\r\n * @Date: 2022-10-27 22:23:38\r\n * @LastEditTime: 2022-11-05 10:04:12\r\n * @FilePath: \\berry\\src\\components\\common\\SetRPC.js\r\n * @Description: \r\n */\r\nimport React, {  useState } from \"react\";\r\nimport { Grid,Button,TextField } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport {useTranslation} from 'react-i18next'; \r\n\r\nimport checkRPC  from  'helper/rpc'\r\nimport Snackbars from 'components/Snackbars'\r\nimport CONFIG from 'config/config.json'\r\n\r\nexport default function SetRPC(props) {\r\n  const { t } = useTranslation()\r\n  const [rpc, setRPC] = useState(CONFIG.NETWORK.RPC);\r\n  const [snackbarsStatu, setSnackbarsStatu] = useState({\r\n    isOpen:false,\r\n    msg:''\r\n  }); \r\n\r\n  const setRPCAction = (event) => {\r\n    setRPC(event.target.value);\r\n  };\r\n\r\n  const changeRPCAction = () => {\r\n    //check connect\r\n    checkRPC(rpc).then((responseTime) =>{\r\n     //console.log('responseTime//',responseTime) \r\n     if(responseTime == false){\r\n      props.action.changeRPCAction({available:false,rpc:rpc,msg:`${t('setRPC.connectRPCFail')}`})\r\n      setSnackbarsStatu({isOpen:true,msg:`${t('setRPC.connectRPCFail')}`})\r\n     }else{\r\n      props.action.changeRPCAction({available:true,rpc:rpc,msg:`${t('setRPC.connectRPCSuccess')} ${responseTime} mm`}) \r\n      setSnackbarsStatu({isOpen:true,msg:`${t('setRPC.connectRPCSuccess')} ${responseTime} mm`})            \r\n     }     \r\n    })\r\n  };\r\n\r\n  const clearRPC = () => {\r\n    setRPC('');\r\n  };  \r\n\r\n  return (  \r\n    <Grid container spacing={2}>\r\n      <Grid item xs={12} sm ={6}>\r\n        <TextField \r\n          fullWidth \r\n          id=\"rpc\" \r\n          label={t('setRPC.node')} \r\n          variant=\"outlined\"  \r\n          size=\"small\" \r\n          value={rpc}\r\n          onChange={setRPCAction}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}  sm ={5}>\r\n        <Button variant=\"contained\"  onClick={changeRPCAction}>{t('setRPC.confirm')}</Button>\r\n        <Button variant=\"outlined\" onClick={clearRPC}  disabled = {rpc == ''} style={{marginLeft:5}}>{t('setRPC.clear')}</Button>\r\n      </Grid> \r\n      \r\n      <Grid item xs={12} key={snackbarsStatu.msg} style={{display:(snackbarsStatu.isOpen ? ' ' : 'none')}}>\r\n        <Snackbars msg = {snackbarsStatu.msg}></Snackbars>\r\n      </Grid>  \r\n    </Grid>\r\n  )\r\n}\r\n","'use strict';\nconst { FeeMarketEIP1559Transaction } = require('@ethereumjs/tx');\nconst Common = require('@ethereumjs/common').default;\nconst { Chain, Hardfork } = require('@ethereumjs/common');\nimport { formatRPCResponse, getCommon } from  './chainUtils'\n\nfunction sendTxAction (web3,chain){\n\n    //最大允许的gas,用作合约状态判断\n    const maxAllowGasForCheck = 2000000\n    const common = getCommon(chain)\n    //入口\n    async function _sendTx({from, to, value, gasLimit, maxPriorityFeePerGas, maxFeePerGas, data, nonce,pk}) {\n        ////console.log('chain==>',chain)\n        ////console.log({from, to, value, gasLimit, maxPriorityFeePerGas, maxFeePerGas, data, nonce})\n\n        const estimate_Gas = await _estimateGas({from, to, value, gasLimit, maxPriorityFeePerGas, maxFeePerGas, data, nonce})\n        ////console.log('estimate_Gas ==>',estimate_Gas)\n        if (estimate_Gas.error) {\n            return formatRPCResponse(estimate_Gas)\n        }      \n\n        if (typeof estimate_Gas == 'number' && estimate_Gas < maxAllowGasForCheck){                    \n            const rawTx = await constructRawTx({from, to, value, gasLimit, maxPriorityFeePerGas, maxFeePerGas, data, nonce});                         \n            const { response: signedTransaction, error } = await signTransaction(rawTx,pk);        \n            if (error) {\n                return { error };\n            }                  \n            const response = await sendTx({signedTransaction})        \n            ////console.log('Transaction : ', response);\n            // if(response.error){\n            //    response = response\n            // }        \n            return response;        \n        }\n\n        return  { error : 'Unknow error found.' }; \n\n    }\n    \n    //构建交易raw\n    async function constructRawTx({from, to, value, gasLimit, maxPriorityFeePerGas, maxFeePerGas, data, nonce}) {\n        //console.log('gasLimit//',gasLimit)\n        const rawTx = {\n          from,            \n          to,\n          value: web3.utils.toHex(value*10**18),\n          gasLimit: web3.utils.numberToHex(gasLimit),\n          maxPriorityFeePerGas: web3.utils.toHex(maxPriorityFeePerGas*10**9),\n          maxFeePerGas: web3.utils.toHex(maxFeePerGas*10**9),\n          data: data,\n          nonce: web3.utils.toHex(nonce),\n          type: '0x2'\n        };\n        return rawTx;\n    }\n    \n    //签名交易\n    async function signTransaction(rawTx,pk) { \n        const pkey = Buffer.from(pk, 'hex');\n        const tx = FeeMarketEIP1559Transaction.fromTxData(rawTx, { common });\n        const signedTx = tx.sign(pkey);\n        const serializedTx = '0x'+signedTx.serialize().toString('hex')\n        //console.log(rawTx.from,serializedTx)\n        return { response: serializedTx };\n    }\n    \n    //发送交易\n    async function sendTx({ signedTransaction }) {\n        try {\n            const response = await web3.eth.sendSignedTransaction(signedTransaction);\n            ////console.log('response',response)\n            return response\n        } catch (error) {\n            return formatRPCResponse(error)\n        }\n    }\n\n    //估计交易gas\n    //estimateGas async返回值是一个promise对象 await命令后面跟着的是一个promise对象\n    async function _estimateGas({from, to, value, gasLimit, maxPriorityFeePerGas, maxFeePerGas, data, nonce}){\n        try{\n            const normalGas =  await web3.eth.estimateGas({\n                from: from,\n                to: to, \n                value: web3.utils.toHex(web3.utils.toWei(value.toString())),\n                gasLimit: web3.utils.numberToHex(gasLimit),\n                maxPriorityFeePerGas: web3.utils.toHex(maxPriorityFeePerGas*10**9),\n                maxFeePerGas: web3.utils.toHex(maxFeePerGas*10**9),\n                data: data\n            });\n            //没有开启mint会返回{error: 'Returned error: execution reverted'}\n            //另外一些返回\n            //{\"jsonrpc\":\"2.0\",\"id\":5,\"error\":{\"code\":-32000,\"message\":\"err: insufficient funds for gas * price + value: address 0xb0F0FA4F561C22c90225a1c557e69Ae764778d69 have 18166361458794181 want 20000000000000000 (supplied gas 210499)\"}}\n            //error.message==> Returned error: err: insufficient funds for gas * price + value: address 0xb0F0FA4F561C22c90225a1c557e69Ae764778d69 have 18166361458794181 want 20000000000000000 (supplied gas 210499)\n            // error==> Error: Returned error: err: insufficient funds for gas * price + value: address 0xb0F0FA4F561C22c90225a1c557e69Ae764778d69 have 18166361458794181 want 20000000000000000 (supplied gas 160499)\n            // at Object.ErrorResponse (errors.js:28:1)\n            // at index.js:302:1\n            // at request.onreadystatechange (index.js:98:1)\n\n            //正常223097 0xd60800239864ff1066720a4cddd2cace1d6c1c39\n            //Returned error: execution reverted\n            return normalGas; \n        }catch(error){\n            //error对象：{\"code\":-32000,\"message\":\"err: insufficient funds for gas * price + value: address 0xb0F0FA4F561C22c90225a1c557e69Ae764778d69 have 18166361458794181 want 20000000000000000 (supplied gas 210499)\"}\n            ////console.log('_estimateGas error==>',error)\n            ////console.log('typeoferror',typeof error)            \n            return formatRPCResponse(error)\n        }           \n    }  \n       \n    return  { _sendTx, _estimateGas }\n\n}\n\nexport { sendTxAction }","'use strict';\nconst Web3 = require('web3');\nexport default function checkRPC(rpc){\n    const web3 = new Web3(new Web3.providers.HttpProvider(rpc));\n    const startTime = Date.now();//毫秒级事件戳\n    //console.log('startTime',startTime)\n    const result = web3.eth.getChainId().then((e)=>{      \n      return Date.now() - startTime  \n    })\n    .catch((e)=>{\n        return false\n    })\n    return result\n}","/*\r\n * @Author: craig smith\r\n * @Date: 2022-10-27 22:23:38\r\n * @LastEditTime: 2022-10-31 10:00:43\r\n * @FilePath: \\berry\\src\\components\\common\\CircularIndeterminate.js\r\n * @Description: \r\n */\r\nimport * as React from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function CircularIndeterminate() {\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <CircularProgress />\r\n    </Box>\r\n  );\r\n}","import React, {  useState } from \"react\";\r\nimport {useTranslation} from 'react-i18next';\r\nconst Web3 = require('web3');\r\n\r\nimport {Grid,Button,TextField} from '@mui/material';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nimport ImportPrivateKey from  'components/common/ImportPrivateKey'\r\nimport Snackbars from 'components/Snackbars'\r\nimport CircularIndeterminate from  'components/common/CircularIndeterminate'\r\n\r\n\r\nimport {sendTxAction} from  'helper/SendTxAction'\r\nimport SetRPC from  'components/common/SetRPC'\r\nimport CONFIG from 'config/config.json'\r\n//import {getNFTsOfCollectionForOwnerByChain} from './../../helper/chainUtils.js'\r\nimport {getNFTsOfCollectionForOwnerByAlchemy} from 'helper/alchemyUtils.js'\r\nimport MainCard from 'ui-component/cards/MainCard'\r\n\r\nlet isRunning = false\r\n\r\nfunction CollectNFT() {\r\n  const { t } = useTranslation()\r\n  const {CHAIN,CHAINID} = CONFIG.NETWORK\r\n  const [rpc, setRPC] = useState(CONFIG.NETWORK.RPC); \r\n  const [web3, setWeb3] = useState(new Web3(new Web3.providers.HttpProvider(rpc)))\r\n  //0xE03a9F2F0d1DAE943c2Eeb5c93C95CBBF524Ad7D\r\n  const [contractAddress, setContractAddress] = useState(\"\") \r\n  const [maxPriorityFeePerGas, setMaxPriorityFeePerGas] = useState(1)\r\n  const [maxFeePerGas, setMaxFeePerGas] = useState(2);\r\n  //0x2c85f238aC2fd56208a982f43889030b16ba9a2f\r\n  const [collectionTo, setCollectionTo] = useState('')\r\n  const [privateKey, setPrivateKey] = useState({\r\n    addrStr:\"\",   \r\n    pkStr:\"\",\r\n    pkArr:[],\r\n    addrArr:[] \r\n  });\r\n\r\n  const [collectedNFTs,setCollectedNFTs] = useState(0)  \r\n  const [totalNFTs,setTotalNFTs] = useState(0)\r\n\r\n  const [snackbarsStatu, setSnackbarsStatu] = useState({\r\n    isOpen:false,\r\n    msg:''\r\n  }); \r\n\r\n  //show the action doing \r\n  const [actionTip, setActionTip] = useState('')\r\n\r\n  //标准transferFrom函数的abi\r\n  const abi = {\r\n    \"inputs\": [{\r\n      \"internalType\": \"address\",\r\n      \"name\": \"from\",\r\n      \"type\": \"address\"\r\n    }, {\r\n      \"internalType\": \"address\",\r\n      \"name\": \"to\",\r\n      \"type\": \"address\"\r\n    }, {\r\n      \"internalType\": \"uint256\",\r\n      \"name\": \"tokenId\",\r\n      \"type\": \"uint256\"\r\n    }],\r\n    \"name\": \"transferFrom\",\r\n    \"outputs\": [],\r\n    \"stateMutability\": \"nonpayable\",\r\n    \"type\": \"function\"\r\n  }  \r\n\r\n  const changeRPCAction = (newRpc) => {\r\n    if(newRpc.available){     \r\n      setWeb3(new Web3(new Web3.providers.HttpProvider(newRpc.rpc)))          \r\n    }     \r\n }; \r\n\r\n  const setContractAddressAction = (event) => {\r\n    setContractAddress(event.target.value);\r\n  };\r\n\r\n  const clearContractAddressAction = (event) => {\r\n    setContractAddress('');\r\n  };  \r\n\r\n  const setMaxPriorityFeePerGasAction = (event) => {\r\n    setMaxPriorityFeePerGas(event.target.value);\r\n  };\r\n\r\n  const setMaxFeePerGasAction = (event) => {\r\n    setMaxFeePerGas(event.target.value);\r\n  };\r\n\r\n  const setCollectionToAction = (event) => {\r\n    setCollectionTo(event.target.value);\r\n  };\r\n  \r\n  const clearCollectionToAction = (event) => {\r\n    setCollectionTo('');\r\n  };  \r\n  \r\n  const setPrivateKeyAction = (privateKey) => {  \r\n    setPrivateKey(privateKey)\r\n    //setGridData(privateKey.pkArr);\r\n  }; \r\n\r\n  //归集部分\r\n  const collecteAction = () => {\r\n    ////////console.log('verify',verifyForm())\r\n    if(!verifyForm()) return\r\n    isRunning = true\r\n    setGridRows([])\r\n    ////////console.log('setRunning',isRunning)\r\n    // privateKey.pkArr.forEach((el,index)=>{\r\n    for(let i = 0; i < privateKey.pkArr.length; i++ ){\r\n      setTimeout(async() => {\r\n        const pkArrIndex = i\r\n        ////////console.log('pkArrIndex',pkArrIndex)\r\n        const fromAddr = web3.eth.accounts.privateKeyToAccount(privateKey.pkArr[pkArrIndex]).address \r\n        let nowNonce = await web3.eth.getTransactionCount(fromAddr);      \r\n        //获取nft数量\r\n        const tokensOfAddress = await getNFTsOfCollectionForOwner(web3,contractAddress,fromAddr)\r\n        ////////console.log(tokensOfAddress)\r\n        setTotalNFTs(tokensOfAddress.length) //显示进度\r\n\r\n        if(tokensOfAddress.length > 0) {\r\n          for(let j = 0; j < tokensOfAddress.length; j++ ){\r\n          //tokensOfAddress.forEach( async (tokenId,index) => {\r\n              const tokenId = tokensOfAddress[j]\r\n              //setCollectedNFTs(index + 1)\r\n              //if( index < 13 && index > 3 ){\r\n              const normalGas = await estimateGas({\r\n                from:fromAddr,\r\n                to:contractAddress, \r\n                gas:CONFIG.GASLIMIT, \r\n                value:0, \r\n                abi:abi, \r\n                parameters:[fromAddr, contractAddress,tokenId]\r\n              })\r\n              ////////console.log('normalGas==>', normalGas)\r\n        \r\n              if(normalGas.error) return\r\n\r\n              if (typeof normalGas == 'number' && normalGas < CONFIG.GASLIMIT){\r\n                collecte(privateKey.pkArr[pkArrIndex], fromAddr, tokenId , j , nowNonce ,0) \r\n                nowNonce ++  \r\n              }    \r\n              \r\n              if(j == tokensOfAddress.length - 1 && i == privateKey.pkArr.length - 1){\r\n                isRunning = false\r\n              }\r\n            //}     \r\n          //}); \r\n          }          \r\n        } \r\n\r\n        //没有引发重新渲染\r\n        if(tokensOfAddress.length == 0 && i == privateKey.pkArr.length - 1){ \r\n          setSnackbarsStatu({isOpen:true,msg:'No NFTs found'});          \r\n          isRunning = false  \r\n          ////////console.log('isRunning ==>',isRunning)       \r\n        } \r\n\r\n      }, 1000);\r\n\r\n\r\n    }\r\n    //})\r\n    \r\n    //isRunning = false //set the running status 放在foreach后会立即被执行\r\n    ////////console.log('setRunning',isRunning)    \r\n  }\r\n\r\n  //Mint Functions start\r\n  \r\n  \r\n  async function collecte(pk, fromAddr, tokenId, indexOfTokensOfAddress, nonce, gridIndex) {\r\n    const { _sendTx } = sendTxAction(web3,CHAIN)\r\n    const parameters = [fromAddr,collectionTo,tokenId]    \r\n    const data = buildTransactionData(abi,parameters)\r\n    //setActionTip(`${truncateLR(fromAddr,4,4)} => ${truncateLR(collectionTo,4,4)} (${tokenId})`)\r\n    const response = await _sendTx({\r\n      from: web3.eth.accounts.privateKeyToAccount(pk).address, \r\n      to: contractAddress, \r\n      value: 0, //Unit is eth\r\n      gasLimit:CONFIG.GASLIMIT, //fixed  \r\n      maxPriorityFeePerGas:maxPriorityFeePerGas,  //Unit is Gwei\r\n      maxFeePerGas:maxFeePerGas,  //Unit is Gwei\r\n      data:data, \r\n      nonce:nonce,\r\n      pk:pk\r\n    })\r\n\r\n    const res =  response.error ? response.error : response.transactionHash    \r\n    const msg =  response.error ? `Fail! ${response.error}      [${parseInt(10000*Math.random())}]` : `Successful! ${response}`\r\n    ////////console.log('msg',res)\r\n    setSnackbarsStatu({isOpen:true,msg:res});\r\n    setGridRows((prev)=>[...prev,{ \r\n      id: prev.length>0 ? prev.length + 1 : 1, \r\n      fromAddress: fromAddr,\r\n      toAddress:collectionTo, \r\n      tokenId: tokenId, \r\n      status: res\r\n    }])\r\n    ////////console.log(response);\r\n  }\r\n\r\n  const startCollecte =( async ()=>{\r\n      startInterval()\r\n  })\r\n\r\n  const getNFTsOfCollectionForOwner = async (web3,contractAddress,address) =>{\r\n    const tokenIdArr = await getNFTsOfCollectionForOwnerByAlchemy(contractAddress,address)\r\n    ////////console.log('tokenIdArr...',tokenIdArr)\r\n    return tokenIdArr\r\n  }\r\n\r\n  //这个是setInterval方案,现在没有使用\r\n  const startInterval = () => {\r\n    let mintCheckInterval = setInterval(async ()=>{\r\n      const from = web3.eth.accounts.privateKeyToAccount(privateKey.pkArr[pkArrIndex]).address    \r\n      const haveNFTs = await getNFTsOfCollectionForOwner(web3,web3.contractAddress,from)\r\n      const parameters = [from, contractAddress,haveNFTs[0]]\r\n      ////////console.log('parameters ==>',parameters)\r\n\r\n      const normalGas = await estimateGas({from:privateKey.pkArr[pkArrIndex], to:contractAddress, gas:CONFIG.gaslimit, value:0, abi, parameters})\r\n      ////////console.log('normalGas==>', normalGas)\r\n \r\n      if(normalGas.error == 'INSUFFICIENT_FUNDS'){\r\n        clearInterval(mintCheckInterval);\r\n        return;\r\n      }\r\n      if (typeof normalGas == 'number' && normalGas < CONFIG.GASLIMIT){\r\n        clearInterval(mintCheckInterval)\r\n        privateKey.pkArr.forEach((pk,index)=>{\r\n          updateGridRows({index:index,timesChange:1,statusChange:\"pending\"})  \r\n          collecte(pk,index)\r\n        }) \r\n      }\r\n    },1000)\r\n  }\r\n\r\n  //这个update方法也有待优化，应该只设置state就行,让表格组件自己处理\r\n  const updateGridRows = async ({index, timesChange, hash, statusChange}) => {\r\n    let tmpGridRows = gridRows \r\n    ////////console.log('statusChange',statusChange)      \r\n    // ////////console.log('gridRows',gridRows)\r\n    // ////////console.log('index',index)    \r\n    // ////////console.log('gridRows.times',gridRows[index].times)\r\n    hash && (tmpGridRows[index].hash = hash)\r\n    timesChange && (tmpGridRows[index].times = tmpGridRows[index].times + timesChange)\r\n    if (statusChange && statusChange.response){\r\n      let res = statusChange.response\r\n      ////////console.log(res)  \r\n      if(res.error){\r\n        tmpGridRows[index].status = res.error\r\n      }else{\r\n        const receipt = await web3.eth.getTransactionReceipt(res)\r\n        ////////console.log(receipt)\r\n        tmpGridRows[index].status = receipt.status == true ? \"✓\" : receipt.status\r\n        tmpGridRows[index].hash = res        \r\n      }    \r\n    }\r\n\r\n    //临时解决state不更新的问题\r\n    setGridRows([])\r\n    setGridRows(tmpGridRows)\r\n    ////////console.log('gridRows',gridRows)\r\n    return\r\n    // let tmpGridRows = JSON.parse(JSON.stringify(gridRows))\r\n    // ////console.log('tmpGridRows1',tmpGridRows)        \r\n  }\r\n\r\n  //构建交易data\r\n  const buildTransactionData = (abi, parameters) =>{\r\n    const buildData = web3.eth.abi.encodeFunctionCall(abi, parameters)\r\n    //////console.log(buildData)\r\n    return buildData\r\n  }  \r\n\r\n  //估算gas费用\r\n  async function estimateGas({from, to, gas, value, abi, parameters}){\r\n    const transactionData = buildTransactionData(abi, parameters)\r\n    const normalGas =  await web3.eth.estimateGas({to,from:'0x0000000000000000000000000000000000000000', data:transactionData})\r\n      .then(res=>{\r\n        //////console.log('res',res)\r\n        return res\r\n      })\r\n      .catch(function(error){\r\n        ////////console.log('error.message==>',error.message)\r\n        if (error.message.indexOf('insufficient funds for gas * price + value') > 0) {\r\n          return { error: 'INSUFFICIENT_FUNDS' };\r\n        }\r\n        return { error: error.message }\r\n      });      \r\n    return normalGas;    \r\n  }  \r\n\r\n//send tx Functions end\r\n\r\n  const [gridRows,setGridRows] = useState([])    \r\n\r\n  const columns = [\r\n    { field: \"id\", hide: false,headerAlign: 'center' },\r\n    { field: \"fromAddress\", headerName: t('collectNFT.fromAddress'), width: 160 },\r\n    { field: \"toAddress\", headerName: t('collectNFT.toAddress'), width: 160 },\r\n    { field: \"tokenId\", headerName: t('collectNFT.tokenId'), width: 80 },\r\n    { field: \"status\", headerName: t('collectNFT.status'), width: 200 }         \r\n  ];\r\n\r\n  const setGridData = async (pkArr)=>{\r\n    let rows = await Promise.all(\r\n      pkArr.map(async (item,index) => {\r\n        const address = web3.eth.accounts.privateKeyToAccount(item).address\r\n        const balance = await web3.eth.getBalance(address)\r\n        return {\r\n          id:index + 1,\r\n          address:address,\r\n          balance:web3.utils.fromWei(balance,'ether')\r\n        };\r\n      })\r\n    )\r\n    ////////console.log(rows)\r\n    setGridRows(rows)\r\n    ////////console.log(gridRows)\r\n  }\r\n\r\n  //================================================================VerifyForm Data\r\n  const [formErrors, setFormErrors] = useState({})  \r\n\r\n  const setFormErrorsAction = (id,value) =>{\r\n    setFormErrors((prev) => {\r\n      let newValue = { ...prev, ...{[id]:value} }\r\n      ////////console.log('newValue',newValue)\r\n      return newValue\r\n    })\r\n  }\r\n\r\n  const verifyForm = () => {\r\n    const checkAddress = isValidAddress(contractAddress)\r\n    setFormErrorsAction('contractAddress',!checkAddress)\r\n    const checkCollectionToAddress = isValidAddress(collectionTo)\r\n    setFormErrorsAction('collectionTo',!checkCollectionToAddress)\r\n    const checkPrivateKey = hasPrivateKey() \r\n    setFormErrorsAction('privateKey',!checkPrivateKey)         \r\n    if(!checkAddress \r\n      || !checkPrivateKey \r\n      || !checkCollectionToAddress\r\n    ){\r\n      return false\r\n    }\r\n    return true   \r\n  }\r\n\r\n  const isValidAddress = (address) => {\r\n    if(address == '') return false\r\n    return web3.utils.isAddress(address)\r\n  }  \r\n\r\n  const hasPrivateKey = () => {\r\n    return privateKey.pkArr.length > 0\r\n  }  \r\n\r\n  //================================================================\r\n\r\n  ///////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  return ( \r\n    <MainCard \r\n      title={t('collectNFT.title')}> \r\n      <Grid container spacing={2}>      \r\n        <Grid item xs={12}>\r\n          <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <SetRPC action={{'changeRPCAction':changeRPCAction}} data ={{'rpc':rpc}}/>  \r\n                </Grid>             \r\n              </Grid> \r\n            </Grid>\r\n          </Grid>\r\n        </Grid> \r\n        <Grid item xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={9} sm ={6}>\r\n              <TextField \r\n                error = {formErrors.contractAddress}\r\n                fullWidth\r\n                id=\"contract_address\" \r\n                label={t('collectNFT.contractAddress')}\r\n                variant=\"outlined\"  \r\n                size=\"small\" \r\n                value={contractAddress}\r\n                onChange={setContractAddressAction}              \r\n              />\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button  variant=\"text\" onClick={clearContractAddressAction}>{t('collectNFT.contractAddressClear')}</Button>\r\n            </Grid> \r\n          </Grid>\r\n        </Grid>         \r\n\r\n        <Grid item xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm ={3}>\r\n              <TextField \r\n                fullWidth\r\n                id=\"maxpriorityfeepergas\" \r\n                label={t('collectNFT.maxpriorityfeepergas')}\r\n                variant=\"outlined\"  \r\n                size=\"small\" \r\n                type=\"number\"\r\n                value={maxPriorityFeePerGas}\r\n                onChange={setMaxPriorityFeePerGasAction}              \r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm ={3}>\r\n              <TextField\r\n              fullWidth\r\n              id=\"maxfeepergas\" \r\n              label={t('collectNFT.maxFee')}\r\n              variant=\"outlined\"  \r\n              size=\"small\" \r\n              type=\"number\"\r\n              value={maxFeePerGas}\r\n              onChange={setMaxFeePerGasAction} \r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid> \r\n\r\n        <Grid item xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={9} sm ={6}>\r\n              <TextField \r\n                error = {formErrors.collectionTo}\r\n                fullWidth\r\n                id=\"mint_method\" \r\n                label={t('collectNFT.collectionTo')}\r\n                variant=\"outlined\"  \r\n                size=\"small\" \r\n                value={collectionTo}\r\n                onChange={setCollectionToAction}              \r\n                />\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button  variant=\"text\" onClick={clearCollectionToAction}>{t('collectNFT.collectionToClear')}</Button>\r\n            </Grid> \r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n        <ImportPrivateKey \r\n          setPk={setPrivateKeyAction} \r\n          provider={web3} \r\n          chain={CHAIN} \r\n          title={t('collectNFT.importPrivateKeyTitle')}\r\n          error = {formErrors.privateKey}\r\n        />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} key={snackbarsStatu.msg} style={{display:(snackbarsStatu.isOpen ? ' ' : 'none')}}>\r\n          <Snackbars msg = {snackbarsStatu.msg}></Snackbars>\r\n        </Grid> \r\n\r\n        <Grid item xs={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={1}>\r\n              <Button \r\n                variant=\"contained\" \r\n                onClick={collecteAction}\r\n                disabled = {isRunning}\r\n              >\r\n                {t('collectNFT.execute')}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}  style={{marginLeft:10,display:(isRunning ? '' :'none' )}}>\r\n              <CircularIndeterminate/>\r\n            </Grid> \r\n                                        \r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}  style={{ height: 600,textAlign:'center', width: \"100%\" }}>\r\n          <DataGrid rows={gridRows} columns={columns}/>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}  style={{ height: 30, width: \"100%\",textAlign:'center', display:'none' }}>\r\n          {'No Data'}\r\n        </Grid>      \r\n        \r\n      </Grid>\r\n    </MainCard>     \r\n  );\r\n}\r\n\r\nexport default CollectNFT;","/*\n * @Author: error: git config user.name && git config user.email & please set dead value or install git\n * @Date: 2022-10-16 10:26:39\n * @LastEditors: error: git config user.name && git config user.email & please set dead value or install git\n * @LastEditTime: 2022-10-21 11:34:39\n * @FilePath: \\NFTTools\\src\\helper\\alchemyUtils.js\n * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\n */\nimport CONFIG from '../config/config.json'\n// This script demonstrates access to the NFT API via the Alchemy SDK.\nimport {\n    Network,\n    Alchemy\n  } from \"alchemy-sdk\";\n\n  //Gets all NFTs(index) of a collection currently owned by a given address.\n  async function getNFTsOfCollectionForOwnerByAlchemy(contractAddress, address){\n    // Optional Config object, but defaults to demo api-key and eth-mainnet.\n    const settings = {\n      apiKey: CONFIG.ALCHEMY.KEY, // Replace with your Alchemy API Key.\n      network: Network[CONFIG.ALCHEMY.CHAIN], // Replace with your network.\n      maxRetries: 10,\n    }    \n    const alchemy = new Alchemy(settings)\n    const nftsForOwner = await alchemy.nft.getNftsForOwner(address)\n    ////console.log('nftsForOwner==>',nftsForOwner)\n    //To save tokenids of owner\n    let tokenIdArr = []\n    for (const nft of nftsForOwner.ownedNfts) {\n       if(nft.contract.address.toLowerCase() == contractAddress.toLowerCase()){\n        tokenIdArr.push(nft.tokenId)\n       }\n    }\n    return tokenIdArr\n  }\n  \n  export { getNFTsOfCollectionForOwnerByAlchemy }"],"names":["TransitionLeft","props","direction","Snackbars","theme","useTheme","snackPack","setSnackPack","React","open","setOpen","messageInfo","setMessageInfo","undefined","transition","setTransition","length","prev","slice","handleClose","event","reason","message","msg","key","Date","getTime","style","background","palette","secondary","main","autoHideDuration","onClose","TransitionComponent","TransitionProps","onExited","action","color","sx","p","onClick","PkGroup","groupNumber","setGroupNumber","useState","setGroupNumberAction","val","target","value","data","setGroupAction","Box","component","border","Button","variant","size","px","mr","Input","styled","display","ImportPrivateKey","t","useTranslation","web3","provider","storagePk","Storage","addrStr","pkStr","pkArr","addrArr","privateKey","setPrivateKey","buildPrivateKey","pkObject","match","map","pKey","eth","accounts","privateKeyToAccount","address","join","setPk","showPK","setShowPK","useEffect","privateKeyObject","Grid","container","spacing","item","xs","TextField","fontSize","fullWidth","id","label","title","multiline","rows","onChange","disabled","error","htmlFor","accept","multiple","type","pkFile","document","querySelector","files","reader","FileReader","readAsText","onload","this","result","e","Alert","FormControlLabel","control","Switch","checked","inputProps","SetRPC","rpc","setRPC","CONFIG","snackbarsStatu","setSnackbarsStatu","isOpen","sm","checkRPC","then","responseTime","changeRPCAction","available","marginLeft","FeeMarketEIP1559Transaction","require","Chain","Hardfork","sendTxAction","chain","common","getCommon","async","_estimateGas","from","to","gasLimit","maxPriorityFeePerGas","maxFeePerGas","nonce","estimateGas","utils","toHex","toWei","toString","numberToHex","formatRPCResponse","_sendTx","pk","estimate_Gas","rawTx","constructRawTx","response","signedTransaction","pkey","Buffer","signedTx","fromTxData","sign","serialize","signTransaction","sendSignedTransaction","sendTx","Web3","providers","HttpProvider","startTime","now","getChainId","catch","CircularIndeterminate","CircularProgress","isRunning","CHAIN","CHAINID","setWeb3","contractAddress","setContractAddress","setMaxPriorityFeePerGas","setMaxFeePerGas","collectionTo","setCollectionTo","collectedNFTs","setCollectedNFTs","totalNFTs","setTotalNFTs","actionTip","setActionTip","abi","collecte","fromAddr","tokenId","indexOfTokensOfAddress","gridIndex","buildTransactionData","res","transactionHash","parseInt","Math","random","setGridRows","fromAddress","toAddress","status","getNFTsOfCollectionForOwner","tokenIdArr","settings","apiKey","network","Network","maxRetries","alchemy","Alchemy","nftsForOwner","nft","getNftsForOwner","ownedNfts","contract","toLowerCase","push","getNFTsOfCollectionForOwnerByAlchemy","parameters","encodeFunctionCall","gas","transactionData","indexOf","gridRows","columns","field","hide","headerAlign","headerName","width","formErrors","setFormErrors","setFormErrorsAction","verifyForm","checkAddress","isValidAddress","checkCollectionToAddress","checkPrivateKey","hasPrivateKey","isAddress","MainCard","newRpc","i","setTimeout","pkArrIndex","nowNonce","getTransactionCount","tokensOfAddress","j","normalGas","height","textAlign","DataGrid"],"sourceRoot":""}