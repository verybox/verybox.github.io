{"version":3,"file":"static/js/172.4acc1fbe.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/esm/Alert/alertClasses.js","../node_modules/@mui/material/esm/internal/svg-icons/SuccessOutlined.js","../node_modules/@mui/material/esm/internal/svg-icons/ReportProblemOutlined.js","../node_modules/@mui/material/esm/internal/svg-icons/ErrorOutline.js","../node_modules/@mui/material/esm/internal/svg-icons/InfoOutlined.js","../node_modules/@mui/material/esm/Alert/Alert.js","../node_modules/alchemy-sdk/src/types/types.ts","../node_modules/alchemy-sdk/src/util/const.ts","../node_modules/alchemy-sdk/src/api/alchemy-config.ts","../node_modules/alchemy-sdk/src/api/util.ts","../node_modules/alchemy-sdk/src/util/util.ts","../node_modules/alchemy-sdk/src/api/core-namespace.ts","../node_modules/alchemy-sdk/src/util/logger.ts","../node_modules/alchemy-sdk/src/version.ts","../node_modules/alchemy-sdk/src/util/sendRest.ts","../node_modules/alchemy-sdk/src/internal/backoff.ts","../node_modules/alchemy-sdk/src/internal/dispatch.ts","../node_modules/alchemy-sdk/src/internal/nft-api.ts","../node_modules/alchemy-sdk/src/api/nft-namespace.ts","../node_modules/alchemy-sdk/src/api/notify-namespace.ts","../node_modules/alchemy-sdk/src/api/transact-namespace.ts","../node_modules/alchemy-sdk/src/api/websocket-namespace.ts","../node_modules/alchemy-sdk/src/api/alchemy.ts","../node_modules/alchemy-sdk/node_modules/axios/index.js","../node_modules/alchemy-sdk/node_modules/axios/lib/adapters/xhr.js","../node_modules/alchemy-sdk/node_modules/axios/lib/axios.js","../node_modules/alchemy-sdk/node_modules/axios/lib/cancel/Cancel.js","../node_modules/alchemy-sdk/node_modules/axios/lib/cancel/CancelToken.js","../node_modules/alchemy-sdk/node_modules/axios/lib/cancel/isCancel.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/Axios.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/InterceptorManager.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/buildFullPath.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/createError.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/dispatchRequest.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/enhanceError.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/mergeConfig.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/settle.js","../node_modules/alchemy-sdk/node_modules/axios/lib/core/transformData.js","../node_modules/alchemy-sdk/node_modules/axios/lib/defaults/index.js","../node_modules/alchemy-sdk/node_modules/axios/lib/defaults/transitional.js","../node_modules/alchemy-sdk/node_modules/axios/lib/env/data.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/bind.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/buildURL.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/combineURLs.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/cookies.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/isAbsoluteURL.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/isAxiosError.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/isURLSameOrigin.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/normalizeHeaderName.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/parseHeaders.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/spread.js","../node_modules/alchemy-sdk/node_modules/axios/lib/helpers/validator.js","../node_modules/alchemy-sdk/node_modules/axios/lib/utils.js"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getAlertUtilityClass(slot) {\n  return generateUtilityClass('MuiAlert', slot);\n}\nconst alertClasses = generateUtilityClasses('MuiAlert', ['root', 'action', 'icon', 'message', 'filled', 'filledSuccess', 'filledInfo', 'filledWarning', 'filledError', 'outlined', 'outlinedSuccess', 'outlinedInfo', 'outlinedWarning', 'outlinedError', 'standard', 'standardSuccess', 'standardInfo', 'standardWarning', 'standardError']);\nexport default alertClasses;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"action\", \"children\", \"className\", \"closeText\", \"color\", \"components\", \"componentsProps\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { darken, lighten } from '@mui/system';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport Paper from '../Paper';\nimport alertClasses, { getAlertUtilityClass } from './alertClasses';\nimport IconButton from '../IconButton';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    variant,\n    color,\n    severity,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', `${variant}${capitalize(color || severity)}`, `${variant}`],\n    icon: ['icon'],\n    message: ['message'],\n    action: ['action']\n  };\n  return composeClasses(slots, getAlertUtilityClass, classes);\n};\n\nconst AlertRoot = styled(Paper, {\n  name: 'MuiAlert',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color || ownerState.severity)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  const getColor = theme.palette.mode === 'light' ? darken : lighten;\n  const getBackgroundColor = theme.palette.mode === 'light' ? lighten : darken;\n  const color = ownerState.color || ownerState.severity;\n  return _extends({}, theme.typography.body2, {\n    backgroundColor: 'transparent',\n    display: 'flex',\n    padding: '6px 16px'\n  }, color && ownerState.variant === 'standard' && {\n    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),\n    backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),\n    [`& .${alertClasses.icon}`]: theme.vars ? {\n      color: theme.vars.palette.Alert[`${color}IconColor`]\n    } : {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'outlined' && {\n    color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),\n    border: `1px solid ${(theme.vars || theme).palette[color].light}`,\n    [`& .${alertClasses.icon}`]: theme.vars ? {\n      color: theme.vars.palette.Alert[`${color}IconColor`]\n    } : {\n      color: theme.palette.mode === 'dark' ? theme.palette[color].main : theme.palette[color].light\n    }\n  }, color && ownerState.variant === 'filled' && _extends({\n    fontWeight: theme.typography.fontWeightMedium\n  }, theme.vars ? {\n    color: theme.vars.palette.Alert[`${color}FilledColor`],\n    backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]\n  } : {\n    backgroundColor: theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main,\n    color: theme.palette.getContrastText(theme.palette.mode === 'dark' ? theme.palette[color].dark : theme.palette[color].main)\n  }));\n});\nconst AlertIcon = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => styles.icon\n})({\n  marginRight: 12,\n  padding: '7px 0',\n  display: 'flex',\n  fontSize: 22,\n  opacity: 0.9\n});\nconst AlertMessage = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0',\n  minWidth: 0,\n  overflow: 'auto'\n});\nconst AlertAction = styled('div', {\n  name: 'MuiAlert',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'flex-start',\n  padding: '4px 0 0 16px',\n  marginLeft: 'auto',\n  marginRight: -8\n});\nconst defaultIconMapping = {\n  success: /*#__PURE__*/_jsx(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/_jsx(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/_jsx(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\nconst Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {\n  var _components$CloseButt, _components$CloseIcon;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAlert'\n  });\n\n  const {\n    action,\n    children,\n    className,\n    closeText = 'Close',\n    color,\n    components = {},\n    componentsProps = {},\n    icon,\n    iconMapping = defaultIconMapping,\n    onClose,\n    role = 'alert',\n    severity = 'success',\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    color,\n    severity,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const AlertCloseButton = (_components$CloseButt = components.CloseButton) != null ? _components$CloseButt : IconButton;\n  const AlertCloseIcon = (_components$CloseIcon = components.CloseIcon) != null ? _components$CloseIcon : CloseIcon;\n  return /*#__PURE__*/_jsxs(AlertRoot, _extends({\n    role: role,\n    elevation: 0,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [icon !== false ? /*#__PURE__*/_jsx(AlertIcon, {\n      ownerState: ownerState,\n      className: classes.icon,\n      children: icon || iconMapping[severity] || defaultIconMapping[severity]\n    }) : null, /*#__PURE__*/_jsx(AlertMessage, {\n      ownerState: ownerState,\n      className: classes.message,\n      children: children\n    }), action != null ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: action\n    }) : null, action == null && onClose ? /*#__PURE__*/_jsx(AlertAction, {\n      ownerState: ownerState,\n      className: classes.action,\n      children: /*#__PURE__*/_jsx(AlertCloseButton, _extends({\n        size: \"small\",\n        \"aria-label\": closeText,\n        title: closeText,\n        color: \"inherit\",\n        onClick: onClose\n      }, componentsProps.closeButton, {\n        children: /*#__PURE__*/_jsx(AlertCloseIcon, _extends({\n          fontSize: \"small\"\n        }, componentsProps.closeIcon))\n      }))\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The components used for each slot inside the Alert.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    CloseButton: PropTypes.elementType,\n    CloseIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    closeButton: PropTypes.object,\n    closeIcon: PropTypes.object\n  }),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined', 'standard']), PropTypes.string])\n} : void 0;\nexport default Alert;","import {\n  EventType,\n  TransactionReceipt\n} from '@ethersproject/abstract-provider';\nimport { BigNumberish } from '@ethersproject/bignumber';\n\nimport { BaseNft, Nft } from '../api/nft';\n\n// TODO: separate this file into other files.\n\n/**\n * Options object used to configure the Alchemy SDK.\n *\n * @public\n */\nexport interface AlchemySettings {\n  /** The Alchemy API key that can be found in the Alchemy dashboard. */\n  apiKey?: string;\n\n  /**\n   * The name of the network. Once configured, the network cannot be changed. To\n   * use a different network, instantiate a new `Alchemy` instance\n   */\n  network?: Network;\n\n  /** The maximum number of retries to attempt if a request fails. Defaults to 5. */\n  maxRetries?: number;\n\n  /**\n   * Optional URL endpoint to use for all requests. Setting this field will\n   * override the URL generated by the {@link network} and {@link apiKey} fields.\n   *\n   * This field is useful for testing or for using a custom node endpoint. Note\n   * that not all methods will work with custom URLs.\n   */\n  url?: string;\n\n  /**\n   * Alchemy auth token required to use the Notify API. This token can be found\n   * in the Alchemy Dashboard on the Notify tab.\n   */\n  authToken?: string;\n}\n\n/**\n * The supported networks by Alchemy. Note that some functions are not available\n * on all networks. Please refer to the Alchemy documentation for which APIs are\n * available on which networks\n * {@link https://docs.alchemy.com/alchemy/apis/feature-support-by-chain}\n *\n * @public\n */\nexport enum Network {\n  ETH_MAINNET = 'eth-mainnet',\n  /** @deprecated - Will be removed in subsequent versions */\n  ETH_ROPSTEN = 'eth-ropsten',\n  ETH_GOERLI = 'eth-goerli',\n  /** @deprecated - Will be removed in subsequent versions */\n  ETH_KOVAN = 'eth-kovan',\n  /** @deprecated - Will be removed in subsequent versions */\n  ETH_RINKEBY = 'eth-rinkeby',\n  OPT_MAINNET = 'opt-mainnet',\n  /** @deprecated - Will be removed in subsequent versions */\n  OPT_KOVAN = 'opt-kovan',\n  OPT_GOERLI = 'opt-goerli',\n  ARB_MAINNET = 'arb-mainnet',\n  /** @deprecated - Will be removed in subsequent versions */\n  ARB_RINKEBY = 'arb-rinkeby',\n  ARB_GOERLI = 'arb-goerli',\n  MATIC_MAINNET = 'polygon-mainnet',\n  MATIC_MUMBAI = 'polygon-mumbai',\n  ASTAR_MAINNET = 'astar-mainnet'\n}\n\n/** Token Types for the `getTokenBalances()` endpoint. */\nexport enum TokenBalanceType {\n  /**\n   * Option to fetch the top 100 tokens by 24-hour volume. This option is only\n   * available on Mainnet in Ethereum, Polygon, and Arbitrum.\n   */\n  DEFAULT_TOKENS = 'DEFAULT_TOKENS',\n\n  /**\n   * Option to fetch the set of ERC-20 tokens that the address as ever held. his\n   * list is produced by an address's historical transfer activity and includes\n   * all tokens that the address has ever received.\n   */\n  ERC20 = 'erc20'\n}\n\n/**\n * Optional params to pass into `getTokenBalances()` to fetch all ERC-20 tokens\n * instead of passing in an array of contract addresses to fetch balances for.\n */\nexport interface TokenBalancesOptionsErc20 {\n  /** The ERC-20 token type. */\n  type: TokenBalanceType.ERC20;\n\n  /** Optional page key for pagination (only applicable to TokenBalanceType.ERC20) */\n  pageKey?: string;\n}\n\n/**\n * Optional params to pass into `getTokenBalances()` to fetch the top 100 tokens\n * instead of passing in an array of contract addresses to fetch balances for.\n */\nexport interface TokenBalancesOptionsDefaultTokens {\n  /** The top 100 token type. */\n  type: TokenBalanceType.DEFAULT_TOKENS;\n}\n\n/**\n * Response object for when the {@link TokenBalancesOptionsErc20} options are\n * used. A page key may be returned if the provided address has many transfers.\n */\nexport interface TokenBalancesResponseErc20 extends TokenBalancesResponse {\n  /**\n   * An optional page key to passed into the next request to fetch the next page\n   * of token balances.\n   */\n  pageKey?: string;\n}\n\n/** @public */\nexport interface TokenBalancesResponse {\n  address: string;\n  tokenBalances: TokenBalance[];\n}\n\n/** @public */\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\n\n/** @public */\nexport interface TokenBalanceSuccess {\n  contractAddress: string;\n  tokenBalance: string;\n  error: null;\n}\n\n/** @public */\nexport interface TokenBalanceFailure {\n  contractAddress: string;\n  tokenBalance: null;\n  error: string;\n}\n\n/**\n * Response object for the {@link CoreNamespace.getTokenMetadata} method.\n *\n * @public\n */\nexport interface TokenMetadataResponse {\n  /**\n   * The token's name. Is `null` if the name is not defined in the contract and\n   * not available from other sources.\n   */\n  name: string | null;\n\n  /**\n   * The token's symbol. Is `null` if the symbol is not defined in the contract\n   * and not available from other sources.\n   */\n  symbol: string | null;\n\n  /**\n   * The number of decimals of the token. Returns `null` if not defined in the\n   * contract and not available from other sources.\n   */\n  decimals: number | null;\n\n  /** URL link to the token's logo. Is `null` if the logo is not available. */\n  logo: string | null;\n}\n\n/**\n * Parameters for the {@link CoreNamespace.getAssetTransfers} method.\n *\n * @public\n */\nexport interface AssetTransfersParams {\n  /**\n   * The starting block to check for transfers. This value is inclusive and\n   * defaults to `0x0` if omitted.\n   */\n  fromBlock?: string;\n\n  /**\n   * The ending block to check for transfers. This value is inclusive and\n   * defaults to the latest block if omitted.\n   */\n  toBlock?: string;\n\n  /**\n   * Whether to return results in ascending or descending order by block number.\n   * Defaults to ascending if omitted.\n   */\n  order?: AssetTransfersOrder;\n\n  /**\n   * The from address to filter transfers by. This value defaults to a wildcard\n   * for all addresses if omitted.\n   */\n  fromAddress?: string;\n\n  /**\n   * The to address to filter transfers by. This value defaults to a wildcard\n   * for all address if omitted.\n   */\n  toAddress?: string;\n\n  /**\n   * List of contract addresses to filter for - only applies to \"erc20\",\n   * \"erc721\", \"erc1155\" transfers. Defaults to all address if omitted.\n   */\n  contractAddresses?: string[];\n\n  /**\n   * Whether to exclude transfers with zero value. Note that zero value is\n   * different than null value. Defaults to `false` if omitted.\n   */\n  excludeZeroValue?: boolean;\n\n  /** REQUIRED field. An array of categories to get transfers for. */\n  category: AssetTransfersCategory[];\n\n  /** The maximum number of results to return per page. Defaults to 1000 if omitted. */\n  maxCount?: number;\n\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse}\n   * {@link AssetTransfersResult}to use for pagination.\n   */\n  pageKey?: string;\n\n  /**\n   * Whether to include additional metadata about each transfer event. Defaults\n   * to `false` if omitted.\n   */\n  withMetadata?: boolean;\n}\n\n/**\n * Parameters for the {@link CoreNamespace.getAssetTransfers} method that\n * includes metadata.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataParams extends AssetTransfersParams {\n  withMetadata: true;\n}\n\n/**\n * Categories of transfers to use with the {@link AssetTransfersParams} request\n * object when using {@link CoreNamespace.getAssetTransfers}.\n *\n * @public\n */\nexport enum AssetTransfersCategory {\n  /**\n   * Top level ETH transactions that occur where the `fromAddress` is an\n   * external user-created address. External addresses have private keys and are\n   * accessed by users.\n   */\n  EXTERNAL = 'external',\n\n  /**\n   * Top level ETH transactions that occur where the `fromAddress` is an\n   * internal, smart contract address. For example, a smart contract calling\n   * another smart contract or sending\n   */\n  INTERNAL = 'internal',\n\n  /** ERC20 transfers. */\n  ERC20 = 'erc20',\n\n  /** ERC721 transfers. */\n  ERC721 = 'erc721',\n\n  /** ERC1155 transfers. */\n  ERC1155 = 'erc1155',\n\n  /** Special contracts that don't follow ERC 721/1155, (ex: CryptoKitties). */\n  SPECIALNFT = 'specialnft'\n}\n\n/**\n * Enum for the order of the {@link AssetTransfersParams} request object when\n * using {@link CoreNamespace.getAssetTransfers}.\n *\n * @public\n */\nexport enum AssetTransfersOrder {\n  ASCENDING = 'asc',\n  DESCENDING = 'desc'\n}\n\n/**\n * An enum for specifying the token type on NFTs.\n *\n * @public\n */\nexport enum NftTokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  UNKNOWN = 'UNKNOWN'\n}\n\n/**\n * Response object for the {@link CoreNamespace.getAssetTransfers} method.\n *\n * @public\n */\nexport interface AssetTransfersResponse {\n  transfers: AssetTransfersResult[];\n  /** Page key for the next page of results, if one exists. */\n  pageKey?: string;\n}\n\n/**\n * Response object for the {@link CoreNamespace.getAssetTransfers} method when\n * the {@link AssetTransfersWithMetadataParams} are used.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataResponse {\n  transfers: AssetTransfersWithMetadataResult[];\n  pageKey?: string;\n}\n\n/**\n * Represents a transfer event that is returned in a {@link AssetTransfersResponse}.\n *\n * @public\n */\nexport interface AssetTransfersResult {\n  /** The category of the transfer. */\n  category: AssetTransfersCategory;\n\n  /** The block number where the transfer occurred. */\n  blockNum: string;\n\n  /** The from address of the transfer. */\n  from: string;\n\n  /** The to address of the transfer. */\n  to: string | null;\n\n  /**\n   * Converted asset transfer value as a number (raw value divided by contract\n   * decimal). `null` if ERC721 transfer or contract decimal not available.\n   */\n  value: number | null;\n\n  /**\n   * The raw ERC721 token id of the transfer as a hex string. `null` if not an\n   * ERC721 transfer.\n   */\n  erc721TokenId: string | null;\n\n  /**\n   * A list of ERC1155 metadata objects if the asset transferred is an ERC1155\n   * token. `null` if not an ERC1155 transfer.\n   */\n  erc1155Metadata: ERC1155Metadata[] | null;\n\n  /** The token id of the token transferred. */\n  tokenId: string | null;\n\n  /**\n   * Returns the token's symbol or ETH for other transfers. `null` if the\n   * information was not available.\n   */\n  asset: string | null;\n\n  /** The transaction hash of the transfer transaction. */\n  hash: string;\n\n  /** Information about the raw contract of the asset transferred. */\n  rawContract: RawContract;\n}\n\n/**\n * Represents a transfer event that is returned in a\n * {@link AssetTransfersResponse} when {@link AssetTransfersWithMetadataParams} are used.\n *\n * @public\n */\nexport interface AssetTransfersWithMetadataResult extends AssetTransfersResult {\n  /** Additional metadata about the transfer event. */\n  metadata: AssetTransfersMetadata;\n}\n\n/**\n * The metadata object for a {@link AssetTransfersResult} when the\n * {@link AssetTransfersParams.withMetadata} field is set to true.\n *\n * @public\n */\nexport interface AssetTransfersMetadata {\n  /** Timestamp of the block from which the transaction event originated. */\n  blockTimestamp: string;\n}\n\n/**\n * Represents NFT metadata that holds fields. Note that since there is no\n * standard metadata format, the fields are not guaranteed to be present.\n *\n * @public\n */\nexport interface NftMetadata extends Record<string, any> {\n  /** Name of the NFT asset. */\n  name?: string;\n\n  /** A human-readable description of the NFT asset. */\n  description?: string;\n\n  /** URL to the NFT asset image. */\n  image?: string;\n\n  /**\n   * The image URL that appears along the top of the NFT asset page. This tends\n   * to be the highest resolution image.\n   */\n  external_url?: string;\n\n  /** Background color of the NFT item. Usually defined as a 6 character hex string. */\n  background_color?: string;\n\n  /** The traits, attributes, and characteristics for the NFT asset. */\n  attributes?: Array<Record<string, any>>;\n}\n\n/**\n * Represents the URI information the NFT's metadata.\n *\n * @public\n */\nexport interface TokenUri {\n  /**\n   * URI for the location of the NFT's original metadata blob (ex: the original\n   * IPFS link).\n   */\n  raw: string;\n\n  /** Public gateway URI for the raw URI. Generally offers better performance. */\n  gateway: string;\n}\n\n/**\n * Represents the URI information for the NFT's media assets.\n *\n * @public\n */\nexport interface Media {\n  /**\n   * URI for the location of the NFT's original metadata blob for media (ex: the\n   * original IPFS link).\n   */\n  raw: string;\n\n  /** Public gateway URI for the raw URI. Generally offers better performance. */\n  gateway: string;\n\n  /** URL for a resized thumbnail of the NFT media asset. */\n  thumbnail?: string;\n\n  /**\n   * The media format (ex: jpg, gif, png) of the {@link gateway} and\n   * {@link thumbnail} assets.\n   */\n  format?: string;\n\n  /**\n   * DEPRECATED - The size of the media asset in bytes\n   *\n   * @deprecated - Please use {@link bytes} instead. This field will be removed\n   *   in a subsequent release.\n   */\n  size?: number;\n\n  /** The size of the media asset in bytes. */\n  bytes?: number;\n}\n\n/** Potential reasons why an NFT contract was classified as spam. */\nexport enum NftSpamClassification {\n  Erc721TooManyOwners = 'Erc721TooManyOwners',\n  Erc721TooManyTokens = 'Erc721TooManyTokens',\n  Erc721DishonestTotalSupply = 'Erc721DishonestTotalSupply',\n  MostlyHoneyPotOwners = 'MostlyHoneyPotOwners',\n  OwnedByMostHoneyPots = 'OwnedByMostHoneyPots'\n}\n\n/** Detailed information on whether and why an NFT contract was classified as spam. */\nexport interface SpamInfo {\n  isSpam: boolean;\n\n  /** A list of reasons why an NFT contract was marked as spam. */\n  classifications: NftSpamClassification[];\n}\n\n/**\n * Optional parameters object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions.\n *\n * This interface is used to fetch NFTs with their associated metadata. To get\n * Nfts without their associated metadata, use {@link GetBaseNftsForOwnerOptions}.\n *\n * @public\n */\nexport interface GetNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse} or\n   * {@link OwnedNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional list of contract addresses to filter the results by. Limit is 20. */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftExcludeFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata?: boolean;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions.\n *\n * This interface is used to fetch NFTs without their associated metadata. To\n * get Nfts with their associated metadata, use {@link GetNftsForOwnerOptions}.\n *\n * @public\n */\nexport interface GetBaseNftsForOwnerOptions {\n  /**\n   * Optional page key from an existing {@link OwnedBaseNftsResponse} or\n   * {@link OwnedNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional list of contract addresses to filter the results by. Limit is 20. */\n  contractAddresses?: string[];\n\n  /**\n   * Optional list of filters applied to the query. NFTs that match one or more\n   * of these filters are excluded from the response.\n   */\n  excludeFilters?: NftExcludeFilters[];\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /** Optional boolean flag to include NFT metadata. Defaults to `false`. */\n  omitMetadata: true;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Enum of NFT filters that can be applied to a {@link getNftsForOwner} request.\n * NFTs that match one or more of these filters are excluded from the response.\n *\n * @beta\n */\nexport enum NftExcludeFilters {\n  /** Exclude NFTs that have been classified as spam. */\n  SPAM = 'SPAM',\n\n  /** Exclude NFTs that have been airdropped to a user. */\n  AIRDROPS = 'AIRDROPS'\n}\n\n/**\n * The response object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions. The object contains the NFTs with\n * metadata owned by the provided address, along with pagination information and\n * the total count.\n *\n * @public\n */\nexport interface OwnedNftsResponse {\n  /** The NFTs owned by the provided address. */\n  readonly ownedNfts: OwnedNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  readonly pageKey?: string;\n\n  /** The total count of NFTs owned by the provided address. */\n  readonly totalCount: number;\n}\n\n/**\n * The response object for the {@link getNftsForOwner} and\n * {@link getNftsForOwnerIterator} functions. The object contains the NFTs\n * without metadata owned by the provided address, along with pagination\n * information and the total count.\n *\n * @public\n */\nexport interface OwnedBaseNftsResponse {\n  /** The NFTs owned by the provided address. */\n  readonly ownedNfts: OwnedBaseNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  readonly pageKey?: string;\n\n  /** The total count of NFTs owned by the provided address. */\n  readonly totalCount: number;\n}\n\n/**\n * Represents an NFT with metadata owned by an address.\n *\n * @public\n */\nexport interface OwnedNft extends Nft {\n  /** The token balance of the NFT. */\n  readonly balance: number;\n}\n\n/**\n * Represents an NFT without metadata owned by an address.\n *\n * @public\n */\nexport interface OwnedBaseNft extends BaseNft {\n  /** The token balance of the NFT. */\n  readonly balance: number;\n}\n\n/**\n * The response object for the {@link getOwnersForNft}.\n *\n * @public\n */\nexport interface GetOwnersForNftResponse {\n  /** An array of owner addresses for the provided token. */\n  readonly owners: string[];\n}\n\n/**\n * The response object for the {@link getOwnersForContract}.\n *\n * @public\n */\nexport interface GetOwnersForContractResponse {\n  /** An array of owner addresses for the provided contract address */\n  owners: string[];\n}\n\n/**\n * The response object for the {@link getOwnersForContract}.\n *\n * @public\n */\nexport interface GetOwnersForContractWithTokenBalancesResponse {\n  /** An array of owner addresses for the provided contract address */\n  owners: NftContractOwner[];\n\n  /** Optional page key that is returned when a collection has more than 50,000 owners. */\n  pageKey?: string;\n}\n\n/**\n * An object representing the owner of an NFT and its corresponding token\n * balances in a {@link GetOwnersForContractWithTokenBalancesResponse} object.\n */\nexport interface NftContractOwner {\n  /** The NFT's owner address. */\n  ownerAddress: string;\n\n  /** A list of objects containing token balances for the provided NFT contract. */\n  tokenBalances: NftContractTokenBalance[];\n}\n\n/**\n * An object representing the owned token and balance values in a\n * {@link GetOwnersForContractWithTokenBalancesResponse} object.\n */\nexport interface NftContractTokenBalance {\n  /** The token id owned in the NFT contract. */\n  tokenId: string;\n\n  /** The token Id balance for the provided owner. */\n  balance: number;\n}\n\n/**\n * The successful object returned by the {@link getFloorPrice} call for each\n * marketplace (e.g. looksRare).\n *\n * @public\n */\nexport interface FloorPriceMarketplace {\n  /** The floor price of the collection on the given marketplace */\n  readonly floorPrice: number;\n  /** The currency in which the floor price is denominated */\n  readonly priceCurrency: string;\n  /** The link to the collection on the given marketplace */\n  readonly collectionUrl: string;\n  /** UTC timestamp of when the floor price was retrieved from the marketplace */\n  readonly retrievedAt: string;\n}\n\n/**\n * The failing object returned by the {@link getFloorPrice} call for each\n * marketplace (e.g. looksRare).\n *\n * @public\n */\nexport interface FloorPriceError {\n  /** Error fetching floor prices from the given marketplace */\n  readonly error: string;\n}\n\n/**\n * The response object for the {@link getFloorPrice} method.\n *\n * @public\n */\nexport interface GetFloorPriceResponse {\n  /**\n   * Name of the NFT marketplace where the collection is listed. Current\n   * marketplaces supported: OpenSea, LooksRare\n   */\n  readonly openSea: FloorPriceMarketplace | FloorPriceError;\n  readonly looksRare: FloorPriceMarketplace | FloorPriceError;\n}\n\n/**\n * Information about the rarity of an NFT's attribute in the specified collection.\n *\n * @public\n */\nexport interface NftAttributeRarity {\n  /** Name of the NFT's attribute. */\n  value: string;\n\n  /** The type of NFT attribute. */\n  traitType: string;\n\n  /**\n   * A number from 0 to 1 representing the prevalence of this value for this\n   * trait type in the current collection.\n   */\n  prevalence: number;\n}\n\n/** The refresh result response object returned by {@link refreshContract}. */\nexport interface RefreshContractResult {\n  /** The NFT contract address that was passed in to be refreshed. */\n  contractAddress: string;\n\n  /** The current state of the refresh request. */\n  refreshState: RefreshState;\n\n  /**\n   * Percentage of tokens currently refreshed, represented as an integer string.\n   * Field can be null if the refresh has not occurred.\n   */\n  progress: string | null;\n}\n\n/** The current state of the NFT contract refresh process. */\nexport enum RefreshState {\n  /** The provided contract is not an NFT or does not contain metadata. */\n  DOES_NOT_EXIST = 'does_not_exist',\n\n  /** The contract has already been queued for refresh. */\n  ALREADY_QUEUED = 'already_queued',\n\n  /** The contract is currently being refreshed. */\n  IN_PROGRESS = 'in_progress',\n\n  /** The contract refresh is complete. */\n  FINISHED = 'finished',\n\n  /** The contract refresh has been queued and await execution. */\n  QUEUED = 'queued',\n\n  /** The contract was unable to be queued due to an internal error. */\n  QUEUE_FAILED = 'queue_failed'\n}\n\n/**\n * The parameter field of {@link TransactionReceiptsParams}.\n *\n * @public\n */\nexport interface TransactionReceiptsBlockNumber {\n  /** The block number to get transaction receipts for. */\n  blockNumber: string;\n}\n\n/**\n * The parameter field of {@link TransactionReceiptsParams}.\n *\n * @public\n */\nexport interface TransactionReceiptsBlockHash {\n  /** The block hash to get transaction receipts for. */\n  blockHash: string;\n}\n\n/**\n * The parameters to use with the {@link CoreNamespace.getTransactionReceipts} method.\n *\n * @public\n */\nexport type TransactionReceiptsParams =\n  | TransactionReceiptsBlockNumber\n  | TransactionReceiptsBlockHash;\n\n/**\n * Response object for a {@link CoreNamespace.getTransactionReceipts} call.\n *\n * @public\n */\nexport interface TransactionReceiptsResponse {\n  /** A list of transaction receipts for the queried block. */\n  receipts: TransactionReceipt[] | null;\n}\n\n/**\n * Metadata object returned in a {@link AssetTransfersResult} object if the asset\n * transferred is an ERC1155.\n *\n * @public\n */\nexport interface ERC1155Metadata {\n  tokenId: string;\n  value: string;\n}\n\n/**\n * Information about the underlying contract for the asset that was transferred\n * in a {@link AssetTransfersResult} object.\n *\n * @public\n */\nexport interface RawContract {\n  /**\n   * The raw transfer value as a hex string. `null` if the transfer was for an\n   * ERC721 or ERC1155 token.\n   */\n  value: string | null;\n\n  /** The contract address. `null` if it was an internal or external transfer. */\n  address: string | null;\n\n  /**\n   * The number of decimals in the contract as a hex string. `null` if the value\n   * is not in the contract and not available from other sources.\n   */\n  decimal: string | null;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} and\n * {@link getNftsForContractIterator} functions.\n *\n * This interface is used to fetch NFTs with their associated metadata. To get\n * Nfts without their associated metadata, use {@link GetBaseNftsForContractOptions}.\n *\n * @public\n */\nexport interface GetNftsForContractOptions {\n  /**\n   * Optional page key from an existing {@link NftContractBaseNftsResponse} or\n   * {@link NftContractNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata?: boolean;\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n\n  /**\n   * No set timeout by default - When metadata is requested, this parameter is\n   * the timeout (in milliseconds) for the website hosting the metadata to\n   * respond. If you want to only access the cache and not live fetch any\n   * metadata for cache misses then set this value to 0.\n   */\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} and\n * {@link getNftsForContractIterator} functions.\n *\n * This interface is used to fetch NFTs without their associated metadata. To\n * get Nfts with their associated metadata, use {@link GetNftsForContractOptions}.\n *\n * @public\n */\nexport interface GetBaseNftsForContractOptions {\n  /**\n   * Optional page key from an existing {@link NftContractBaseNftsResponse} or\n   * {@link NftContractNftsResponse}to use for pagination.\n   */\n  pageKey?: string;\n\n  /** Optional boolean flag to omit NFT metadata. Defaults to `false`. */\n  omitMetadata: false;\n\n  /**\n   * Sets the total number of NFTs to return in the response. Defaults to 100.\n   * Maximum page size is 100.\n   */\n  pageSize?: number;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided contract.\n *\n * @public\n */\nexport interface GetOwnersForContractOptions {\n  /**\n   * Whether to include the token balances per token id for each owner. Defaults\n   * to false when omitted.\n   */\n  withTokenBalances?: boolean;\n\n  /** The block number in hex or decimal to fetch owners for. */\n  block?: string;\n\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n}\n\n/**\n * Optional parameters object for the {@link getNftsForContract} method.\n *\n * This interface configures options when fetching the owner addresses of the\n * provided contract.\n *\n * @public\n */\nexport interface GetOwnersForContractWithTokenBalancesOptions {\n  /**\n   * Whether to include the token balances per token id for each owner. Defaults\n   * to false when omitted.\n   */\n  withTokenBalances: true;\n\n  /** The block number in hex or decimal to fetch owners for. */\n  block?: string;\n\n  /** Optional page key to paginate the next page for large requests. */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getNftsForContract} function. The object\n * contains the NFTs without metadata inside the NFT contract.\n *\n * @public\n */\nexport interface NftContractBaseNftsResponse {\n  /** An array of NFTs without metadata. */\n  nfts: BaseNft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link getNftsForContract} function. The object\n * contains the NFTs with metadata inside the NFT contract.\n *\n * @public\n */\nexport interface NftContractNftsResponse {\n  /** An array of NFTs with metadata. */\n  nfts: Nft[];\n\n  /**\n   * Pagination token that can be passed into another request to fetch the next\n   * NFTs. If there is no page key, then there are no more NFTs to fetch.\n   */\n  pageKey?: string;\n}\n\n/**\n * The response object for the {@link findContractDeployer} function.\n *\n * @public\n */\nexport interface DeployResult {\n  /** The address of the contract deployer, if it is available. */\n  readonly deployerAddress?: string;\n\n  /** The block number the contract was deployed in. */\n  readonly blockNumber: number;\n}\n\n/**\n * Method names for Alchemy's custom Subscription API endpoints.\n *\n * This value is provided in the `method` field when creating an event filter on\n * the Websocket Namespace.\n */\nexport enum AlchemySubscription {\n  PENDING_TRANSACTIONS = 'alchemy_pendingTransactions',\n  MINED_TRANSACTIONS = 'alchemy_minedTransactions'\n}\n\n/**\n * Event filter for the {@link AlchemyWebSocketProvider.on} and\n * {@link AlchemyWebSocketProvider.once} methods to use Alchemy's custom\n * `alchemy_pendingTransactions` endpoint.\n *\n * Returns the transaction information for all pending transactions that match a\n * given filter. For full documentation, see:\n * {@link https://docs.alchemy.com/reference/alchemy-pendingtransactions}\n *\n * Note that excluding all optional parameters will return transaction\n * information for ALL pending transactions that are added to the mempool.\n *\n * @public\n */\nexport interface AlchemyPendingTransactionsEventFilter {\n  method: AlchemySubscription.PENDING_TRANSACTIONS;\n\n  /** Filter pending transactions sent FROM the provided address or array of addresses. */\n  fromAddress?: string | string[];\n\n  /** Filter pending transactions sent TO the provided address or array of addresses. */\n  toAddress?: string | string[];\n\n  /**\n   * Whether to only include transaction hashes and exclude the rest of the\n   * transaction response for a smaller payload. Defaults to false (by default,\n   * the entire transaction response is included).\n   *\n   * Note that setting only {@link hashesOnly} to true will return the same\n   * response as subscribing to `newPendingTransactions`.\n   */\n  hashesOnly?: boolean;\n}\n\n/**\n * Event filter for the {@link AlchemyWebSocketProvider.on} and\n * {@link AlchemyWebSocketProvider.once} methods to use Alchemy's custom\n * `alchemy_minedTransactions` endpoint.\n *\n * Returns the transaction information for all mined transactions that match the\n * provided filter. For full documentation, see:\n * {@link https://docs.alchemy.com/reference/alchemy-minedtransactions}\n *\n * Note that excluding all optional parameters will return transaction\n * information for ALL mined transactions.\n *\n * @public\n */\nexport interface AlchemyMinedTransactionsEventFilter {\n  method: AlchemySubscription.MINED_TRANSACTIONS;\n\n  /**\n   * Address filters to subscribe to. Defaults to all transactions if omitted.\n   * Limit 100 address filters. Requires a non-empty array.\n   */\n  addresses?: NonEmptyArray<AlchemyMinedTransactionsAddress>;\n\n  /**\n   * Whether to include transactions that were removed from the mempool.\n   * Defaults to false.\n   */\n  includeRemoved?: boolean;\n\n  /**\n   * Whether to only include transaction hashes and exclude the rest of the\n   * transaction response for a smaller payload. Defaults to false (by default,\n   * the entire transaction response is included).\n   */\n  hashesOnly?: boolean;\n}\n\n/**\n * Address filters for {@link AlchemyMinedTransactionsEventFilter}. Requires\n * at least one of the fields to be set.\n */\nexport type AlchemyMinedTransactionsAddress = RequireAtLeastOne<{\n  to?: string;\n  from?: string;\n}>;\n\n/**\n * Alchemy's event type that extends the default {@link EventType} interface to\n * also include Alchemy's Subscription API.\n *\n * @public\n */\nexport type AlchemyEventType = EventType | AlchemyEventFilter;\n\n/** This type represents the Alchemy's Subscription API endpoints as event filters\n * compatible with other ethers events. */\nexport type AlchemyEventFilter =\n  | AlchemyMinedTransactionsEventFilter\n  | AlchemyPendingTransactionsEventFilter;\n\n/** Options for the {@link TransactNamespace.sendPrivateTransaction} method. */\nexport interface SendPrivateTransactionOptions {\n  /**\n   * Whether to use fast-mode. Defaults to false. Please note that fast mode\n   * transactions cannot be cancelled using\n   * {@link TransactNamespace.cancelPrivateTransaction}. method.\n   *\n   * See {@link https://docs.flashbots.net/flashbots-protect/rpc/fast-mode} for\n   * more details.\n   */\n  fast: boolean;\n}\n\n/**\n * Response object for the {@link TransactNamespace.sendGasOptimizedTransaction} method.\n * @internal\n */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport interface GasOptimizedTransactionResponse {\n  /**\n   * The tracking id. This can be used to check the status of the transaction via\n   * {@link TransactNamespace.getGasOptimizedTransactionStatus}.\n   */\n  trackingId: string;\n\n  /* An array of the transaction hashes from submitted transactions. */\n  transactionHashes: string[];\n}\n\n/** Response object for the {@link TransactNamespace.getGasOptimizedTransactionStatus} method.\n * @internal*/\n// TODO(txjob): Remove internal tag once this feature is released.\nexport interface GasOptimizedTransactionStatusResponse {\n  /** The status of the submitted transaction job. */\n  jobStatus: GasOptimizedTransactionStatus;\n\n  /** An array of the submitted transactions hashes that have been attempted. */\n  transactionHashesAttempted: string[];\n\n  /** The final mined transaction hash if the job was completed successfully. */\n  minedTransactionHash?: string;\n}\n\n/** Potential transaction job statuses for a {@link GasOptimizedTransactionResponse}\n * @internal */\n// TODO(txjob): Remove internal tag once this feature is released.\nexport enum GasOptimizedTransactionStatus {\n  UNSPECIFIED = 'TRANSACTION_JOB_STATUS_UNSPECIFIED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  COMPLETE = 'COMPLETE',\n  ABANDONED = 'ABANDONED'\n}\n\n/** SDK representation of a Webhook in the Notify API. */\nexport interface Webhook {\n  /** The webhook's unique id. */\n  id: string;\n  /** The network the webhook is on. */\n  network: Network;\n  /** The type of webhook. */\n  type: WebhookType;\n  /** The url that the webhook sends its payload to. */\n  url: string;\n  /** Whether the webhook is currently active */\n  isActive: boolean;\n  /** The creation time of the webhook as an ISO string. */\n  timeCreated: string;\n  /** The signing key used to verify payloads for the webhook. */\n  signingKey: string;\n  /** The webhook version. All newly created webhooks default to V2. */\n  version: WebhookVersion;\n  /**\n   * The app id of the app used for the webhook. This field is only present on\n   * {@link MinedTransactionWebhook} and {@link DroppedTransactionWebhook}\n   */\n  appId?: string;\n}\n\n/** The version of the webhook. All newly created webhooks default to V2. */\nexport enum WebhookVersion {\n  V1 = 'V1',\n  V2 = 'V2'\n}\n\n/** The type of {@link Webhook}. */\nexport enum WebhookType {\n  MINED_TRANSACTION = 'MINED_TRANSACTION',\n  DROPPED_TRANSACTION = 'DROPPED_TRANSACTION',\n  ADDRESS_ACTIVITY = 'ADDRESS_ACTIVITY',\n  NFT_ACTIVITY = 'NFT_ACTIVITY'\n}\n\n/**\n * A Mined Transaction Webhook is used to notify your app whenever a transaction\n * sent through your API key gets successfully mined. This is useful if you want\n * to notify customers that their transaction went through.\n */\nexport interface MinedTransactionWebhook extends Webhook {\n  type: WebhookType.MINED_TRANSACTION;\n}\n\n/**\n * A Dropped Transaction webhook is used to notify your app whenever a\n * transaction sent through your API key gets dropped. This can be useful if you\n * want to notify customers that their transactions were dropped.\n */\nexport interface DroppedTransactionWebhook extends Webhook {\n  type: WebhookType.DROPPED_TRANSACTION;\n}\n\n/**\n * An Address Activity Webhook tracks ETH, ERC20, ERC721, and ERC1155 transfers\n * for the provided addresses. This can be used to notify your app with\n * real-time state changes when your tracked addresses send or receive tokens.\n */\nexport interface AddressActivityWebhook extends Webhook {\n  type: WebhookType.ADDRESS_ACTIVITY;\n}\n\n/**\n * The NFT Activity Webhook tracks all ERC721 and ERC1155 activity. This can be\n * used to notify your app with real time state changes when an NFT is\n * transferred between addresses.\n */\nexport interface NftActivityWebhook extends Webhook {\n  type: WebhookType.NFT_ACTIVITY;\n}\n\n/** The response for a {@link NotifyNamespace.getAllWebhooks} method. */\nexport interface GetAllWebhooksResponse {\n  /** All webhooks attached to the provided auth token. */\n  webhooks: Webhook[];\n  /** The total number of webhooks. */\n  totalCount: number;\n}\n\n/** Options object for the {@link NotifyNamespace.getAddresses} method. */\nexport interface GetAddressesOptions {\n  /** Number of addresses to fetch. */\n  limit?: number;\n\n  /** Page */\n  pageKey?: string;\n}\n\n/** Response object for the {@link NotifyNamespace.getAddresses} method. */\nexport interface AddressActivityResponse {\n  /** The addresses for the webhook. */\n  addresses: string[];\n  /** The total number of addresses. */\n  totalCount: number;\n  /** Optional page key used to fetch the remaining addresses. */\n  pageKey?: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link MinedTransactionWebhook} or {@link DroppedTransactionWebhook}.\n *\n * The webhook will be created on the app and network associated with the appId.\n * To find the app id of a project, go to the Alchemy Dashboard in the Apps tab.\n * After clicking on an app, the app id is the string in the URL following 'apps/'.\n *\n * This is a temporary workaround for now. We're planning on detecting the app\n * id from the provided api key directly. Stay tuned!\n */\nexport interface TransactionWebhookParams {\n  /** The app id of the project to create the webhook on. */\n  appId: string;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link NftActivityWebhook}.\n */\nexport interface NftWebhookParams {\n  /** Array of NFT filters the webhook should track. */\n  filters: NftFilter[];\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/**\n * Params to pass in when calling {@link NotifyNamespace.createWebhook} in order\n * to create a {@link AddressActivityWebhook}.\n */\nexport interface AddressWebhookParams {\n  /** Array of addresses the webhook should activity for. */\n  addresses: string[];\n  /**\n   * Optional network to create the webhook on. If omitted, the webhook will be\n   * created on network of the app provided in the api key config.\n   */\n  network?: Network;\n}\n\n/** NFT to track on a {@link NftActivityWebhook}. */\nexport interface NftFilter {\n  /** The contract address of the NFT. */\n  contractAddress: string;\n  /** The token id of the NFT. */\n  tokenId: BigNumberish;\n}\n\n/** Response object for the {@link NotifyNamespace.getNftFilters} method. */\nexport interface NftFiltersResponse {\n  /** The NFT filters on the provided webhook. */\n  filters: NftFilter[];\n  /** The total number of NFT filters on the webhook. */\n  totalCount: number;\n  /** Optional page key used to fetch the remaining filters. */\n  pageKey?: string;\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to mark a\n * webhook as active or inactive.\n */\nexport interface WebhookStatusUpdate {\n  /** Whether the webhook is active. */\n  isActive: boolean;\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove NFT filters for a {@link NftActivityWebhook}.\n */\nexport interface WebhookNftFilterUpdate {\n  /** The filters to additionally track. */\n  addFilters: NftFilter[];\n  /** Existing filters to remove. */\n  removeFilters: NftFilter[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to add and\n * remove addresses for a {@link AddressActivityWebhook}.\n */\nexport interface WebhookAddressUpdate {\n  /** The addresses to additionally track. */\n  addAddresses: string[];\n  /** Existing addresses to remove. */\n  removeAddresses: string[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to replace\n * all existing addresses for a {@link AddressActivityWebhook}.\n */\nexport interface WebhookAddressOverride {\n  /** The new addresses to track. Existing addresses will be removed. */\n  newAddresses: string[];\n}\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link NftActivityWebhook}.\n */\n\nexport type NftWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookNftFilterUpdate>;\n\n/**\n * Params object when calling {@link NotifyNamespace.updateWebhook} to update a\n * {@link AddressActivityWebhook}.\n */\nexport type AddressWebhookUpdate =\n  | WebhookStatusUpdate\n  | RequireAtLeastOne<WebhookAddressUpdate>\n  | WebhookAddressOverride;\n\n/**\n * Requires at least one of the properties to be set.\n *\n * Implementation copied over\n * from {@link https://learn.microsoft.com/en-us/javascript/api/@azure/keyvault-certificates/requireatleastone?view=azure-node-latest}\n */\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> &\n    Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\n/**\n * Requires an array with at least one value.\n */\nexport type NonEmptyArray<T> = [T, ...T[]];\n","import { Network as NetworkFromEthers } from '@ethersproject/networks';\n\nimport { Network } from '../types/types';\n\nexport const DEFAULT_ALCHEMY_API_KEY = 'demo';\nexport const DEFAULT_NETWORK = Network.ETH_MAINNET;\nexport const DEFAULT_MAX_RETRIES = 5;\n\n/**\n * Returns the base URL for making Alchemy API requests. The `alchemy.com`\n * endpoints only work with non eth json-rpc requests.\n *\n * @internal\n */\nexport function getAlchemyHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}.g.alchemy.com/v2/${apiKey}`;\n}\n\nexport function getAlchemyNftHttpUrl(network: Network, apiKey: string): string {\n  return `https://${network}.g.alchemy.com/nft/v2/${apiKey}`;\n}\n\nexport function getAlchemyWsUrl(network: Network, apiKey: string): string {\n  return `wss://${network}.g.alchemy.com/v2/${apiKey}`;\n}\n\nexport function getAlchemyWebhookHttpUrl(): string {\n  return 'https://dashboard.alchemy.com/api';\n}\n\nexport enum AlchemyApiType {\n  BASE,\n  NFT,\n  WEBHOOK\n}\n\n/**\n * Mapping of network names to their corresponding Network strings used to\n * create an Ethers.js Provider instance.\n */\nexport const EthersNetwork = {\n  [Network.ETH_MAINNET]: 'mainnet',\n  [Network.ETH_ROPSTEN]: 'ropsten',\n  [Network.ETH_GOERLI]: 'goerli',\n  [Network.ETH_KOVAN]: 'kovan',\n  [Network.ETH_RINKEBY]: 'rinkeby',\n  [Network.OPT_MAINNET]: 'optimism',\n  [Network.OPT_KOVAN]: 'optimism-kovan',\n  [Network.OPT_GOERLI]: 'optimism-goerli',\n  [Network.ARB_MAINNET]: 'arbitrum',\n  [Network.ARB_RINKEBY]: 'arbitrum-rinkeby',\n  [Network.ARB_GOERLI]: 'arbitrum-goerli',\n  [Network.MATIC_MAINNET]: 'matic',\n  [Network.MATIC_MUMBAI]: 'maticmum',\n  [Network.ASTAR_MAINNET]: 'astar-mainnet'\n};\n\n/**\n * Mapping of network names to their corresponding Ethers Network objects. These\n * networks are not yet supported by Ethers and are listed here to be overriden\n * in the provider.\n */\nexport const CustomNetworks: { [key: string]: NetworkFromEthers } = {\n  'arbitrum-goerli': {\n    chainId: 421613,\n    name: 'arbitrum-goerli'\n  },\n  'astar-mainnet': {\n    chainId: 592,\n    name: 'astar-mainnet'\n  }\n};\n\nexport function noop(): void {\n  // It's a no-op\n}\n\nexport const ETH_NULL_VALUE = '0x';\n","import { AlchemySettings, Network } from '../types/types';\nimport {\n  AlchemyApiType,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_MAX_RETRIES,\n  DEFAULT_NETWORK,\n  getAlchemyHttpUrl,\n  getAlchemyNftHttpUrl,\n  getAlchemyWebhookHttpUrl\n} from '../util/const';\nimport type { AlchemyProvider } from './alchemy-provider';\nimport type { AlchemyWebSocketProvider } from './alchemy-websocket-provider';\n\n/**\n * This class holds the config information for the SDK client instance and\n * exposes the underlying providers for more advanced use cases.\n *\n * @public\n */\nexport class AlchemyConfig {\n  /** The Alchemy API key. */\n  readonly apiKey: string;\n\n  /** The Network that this SDK is associated with. */\n  readonly network: Network;\n\n  /** The maximum number of retries to perform. */\n  readonly maxRetries: number;\n\n  /**\n   * The optional hardcoded URL to send requests to instead of using the network\n   * and apiKey.\n   */\n  readonly url?: string;\n\n  /** The optional Alchemy auth token to use when sending requests with the Notify API. */\n  readonly authToken?: string;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseAlchemyProvider: Promise<AlchemyProvider> | undefined;\n\n  /**\n   * Dynamically imported provider instance.\n   *\n   * @internal\n   */\n  private _baseAlchemyWssProvider:\n    | Promise<AlchemyWebSocketProvider>\n    | undefined;\n\n  constructor(config?: AlchemySettings) {\n    this.apiKey = config?.apiKey || DEFAULT_ALCHEMY_API_KEY;\n    this.network = config?.network || DEFAULT_NETWORK;\n    this.maxRetries = config?.maxRetries || DEFAULT_MAX_RETRIES;\n    this.url = config?.url;\n    this.authToken = config?.authToken;\n  }\n\n  /**\n   * Returns the URL endpoint to send the HTTP request to. If a custom URL was\n   * provided in the config, that URL is returned. Otherwise, the default URL is\n   * from the network and API key.\n   *\n   * @param apiType - The type of API to get the URL for.\n   * @internal\n   */\n  _getRequestUrl(apiType: AlchemyApiType): string {\n    if (this.url !== undefined) {\n      return this.url;\n    } else if (apiType === AlchemyApiType.NFT) {\n      return getAlchemyNftHttpUrl(this.network, this.apiKey);\n    } else if (apiType === AlchemyApiType.WEBHOOK) {\n      return getAlchemyWebhookHttpUrl();\n    } else {\n      return getAlchemyHttpUrl(this.network, this.apiKey);\n    }\n  }\n\n  /**\n   * Returns an AlchemyProvider instance. Only one provider is created per\n   * Alchemy instance.\n   *\n   * The AlchemyProvider is a wrapper around ether's `AlchemyProvider` class and\n   * has been expanded to support Alchemy's Enhanced APIs.\n   *\n   * Most common methods on the provider are available as top-level methods on\n   * the {@link Alchemy} instance, but the provider is exposed here to access\n   * other less-common methods.\n   *\n   * @public\n   */\n  getProvider(): Promise<AlchemyProvider> {\n    if (!this._baseAlchemyProvider) {\n      this._baseAlchemyProvider = (async () => {\n        const { AlchemyProvider } = await import('./alchemy-provider');\n        return new AlchemyProvider(this);\n      })();\n    }\n    return this._baseAlchemyProvider;\n  }\n\n  /**\n   * Returns an AlchemyWebsocketProvider instance. Only one provider is created\n   * per Alchemy instance.\n   *\n   * The AlchemyWebSocketProvider is a wrapper around ether's\n   * `AlchemyWebSocketProvider` class and has been expanded to support Alchemy's\n   * Subscription APIs, automatic backfilling, and other performance improvements.\n   *\n   * Most common methods on the provider are available as top-level methods on\n   * the {@link Alchemy} instance, but the provider is exposed here to access\n   * other less-common methods.\n   *\n   * @internal\n   */\n  getWebSocketProvider(): Promise<AlchemyWebSocketProvider> {\n    if (!this._baseAlchemyWssProvider) {\n      this._baseAlchemyWssProvider = (async () => {\n        const { AlchemyWebSocketProvider } = await import(\n          './alchemy-websocket-provider'\n        );\n        return new AlchemyWebSocketProvider(this);\n      })();\n    }\n    return this._baseAlchemyWssProvider;\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\n/**\n * Converts a hex string to a decimal number.\n *\n * @param hexString - The hex string to convert.\n * @public\n */\nexport function fromHex(hexString: string): number {\n  return BigNumber.from(hexString).toNumber();\n}\n\n/**\n * Converts a number to a hex string.\n *\n * @param num - The number to convert to hex.\n * @public\n */\nexport function toHex(num: number): string {\n  return BigNumber.from(num).toHexString();\n}\n\n/**\n * Checks if a value is a hex string.\n *\n * @param possibleHexString - The value to check.\n * @public\n */\nexport function isHex(possibleHexString: string): boolean {\n  return /^0x[0-9a-fA-F]+$/.test(possibleHexString);\n}\n","import { BigNumber } from '@ethersproject/bignumber';\n\nimport { BaseNft, BaseNftContract, Nft, NftContract } from '../api/nft';\nimport { toHex } from '../api/util';\nimport {\n  RawBaseNft,\n  RawBaseNftContract,\n  RawNft,\n  RawNftAttributeRarity,\n  RawNftContract,\n  RawSpamInfo\n} from '../internal/raw-interfaces';\nimport {\n  NftAttributeRarity,\n  NftTokenType,\n  SpamInfo,\n  TokenUri\n} from '../types/types';\n\nexport function formatBlock(block: string | number): string {\n  if (typeof block === 'string') {\n    return block;\n  } else if (Number.isInteger(block)) {\n    return toHex(block);\n  }\n  return block.toString();\n}\n\nexport function getBaseNftContractFromRaw(\n  rawBaseNftContract: RawBaseNftContract\n): BaseNftContract {\n  return { address: rawBaseNftContract.address };\n}\n\nexport function getNftContractFromRaw(\n  rawNftContract: RawNftContract\n): NftContract {\n  return {\n    address: rawNftContract.address,\n    name: rawNftContract.contractMetadata.name,\n    symbol: rawNftContract.contractMetadata.symbol,\n    totalSupply: rawNftContract.contractMetadata.totalSupply,\n    tokenType: parseNftTokenType(rawNftContract.contractMetadata.tokenType)\n  };\n}\n\nexport function getBaseNftFromRaw(\n  rawBaseNft: RawBaseNft,\n  contractAddress: string\n): BaseNft {\n  return {\n    contract: { address: contractAddress },\n    tokenId: BigNumber.from(rawBaseNft.id.tokenId).toString(),\n    tokenType: parseNftTokenType(rawBaseNft.id.tokenMetadata?.tokenType)\n  };\n}\n\nexport function getNftFromRaw(rawNft: RawNft, contractAddress: string): Nft {\n  const tokenType = parseNftTokenType(rawNft.id.tokenMetadata?.tokenType);\n  const spamInfo = parseSpamInfo(rawNft.spamInfo);\n  return {\n    contract: {\n      address: contractAddress,\n      name: rawNft.contractMetadata?.name,\n      symbol: rawNft.contractMetadata?.symbol,\n      totalSupply: rawNft.contractMetadata?.totalSupply,\n      tokenType\n    },\n    tokenId: parseNftTokenId(rawNft.id.tokenId),\n    tokenType,\n    title: rawNft.title,\n    description: parseNftDescription(rawNft.description),\n    timeLastUpdated: rawNft.timeLastUpdated,\n    metadataError: rawNft.error,\n    rawMetadata: rawNft.metadata,\n    tokenUri: parseNftTokenUri(rawNft.tokenUri),\n    media: parseNftTokenUriArray(rawNft.media),\n    spamInfo\n  };\n}\n\nexport function getNftRarityFromRaw(\n  rawNftRarity: RawNftAttributeRarity[]\n): NftAttributeRarity[] {\n  return rawNftRarity.map(({ prevalence, trait_type, value }) => ({\n    prevalence,\n    traitType: trait_type,\n    value\n  }));\n}\n\nfunction parseNftTokenId(tokenId: string): string {\n  // We have to normalize the token id here since the backend sometimes\n  // returns the token ID as a hex string and sometimes as an integer.\n  return BigNumber.from(tokenId).toString();\n}\n\nfunction parseNftTokenType(tokenType: string | undefined): NftTokenType {\n  switch (tokenType) {\n    case 'erc721':\n    case 'ERC721':\n      return NftTokenType.ERC721;\n    case 'erc1155':\n    case 'ERC1155':\n      return NftTokenType.ERC1155;\n    default:\n      return NftTokenType.UNKNOWN;\n  }\n}\n\nfunction parseSpamInfo(\n  spamInfo: RawSpamInfo | undefined\n): SpamInfo | undefined {\n  if (!spamInfo) {\n    return undefined;\n  }\n  const { isSpam, classifications } = spamInfo;\n  return {\n    isSpam: isSpam === 'true',\n    classifications\n  };\n}\n\nfunction parseNftDescription(description?: string | string[]): string {\n  if (description === undefined) {\n    return '';\n  }\n\n  // TODO: Remove after backend adds JSON stringification.\n  if (!Array.isArray(description) && typeof description === 'object') {\n    return JSON.stringify(description);\n  }\n\n  return typeof description === 'string' ? description : description.join(' ');\n}\n\nfunction parseNftTokenUri(uri: TokenUri | undefined): TokenUri | undefined {\n  if (uri && uri.raw.length === 0 && uri.gateway.length == 0) {\n    return undefined;\n  }\n  return uri;\n}\n\nfunction parseNftTokenUriArray(arr: TokenUri[] | undefined): TokenUri[] {\n  if (arr === undefined) {\n    return [];\n  }\n  return arr.filter(uri => parseNftTokenUri(uri) !== undefined);\n}\n\nexport const IS_BROWSER = typeof window !== 'undefined' && window !== null;\n","import type {\n  Block,\n  BlockTag,\n  BlockWithTransactions,\n  FeeData,\n  Filter,\n  FilterByBlockHash,\n  Log,\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport type { BigNumber, BigNumberish } from '@ethersproject/bignumber';\nimport type { Network as EthersNetworkAlias } from '@ethersproject/networks/lib/types';\nimport type { Deferrable } from '@ethersproject/properties';\n\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  AssetTransfersWithMetadataParams,\n  AssetTransfersWithMetadataResponse,\n  DeployResult,\n  TokenBalanceType,\n  TokenBalancesOptionsDefaultTokens,\n  TokenBalancesOptionsErc20,\n  TokenBalancesResponse,\n  TokenBalancesResponseErc20,\n  TokenMetadataResponse,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse\n} from '../types/types';\nimport { ETH_NULL_VALUE } from '../util/const';\nimport { formatBlock } from '../util/util';\nimport { AlchemyConfig } from './alchemy-config';\nimport { toHex } from './util';\n\n/**\n * The core namespace contains all commonly-used [Ethers.js\n * Provider](https://docs.ethers.io/v5/api/providers/api-providers/#AlchemyProvider)\n * methods. If you are already using Ethers.js, you should be simply able to\n * replace the Ethers.js Provider object with `alchemy.core` when accessing\n * provider methods and it should just work.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.core`.\n */\nexport class CoreNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Returns the balance of a given address as of the provided block.\n   *\n   * @param addressOrName The address or name of the account to get the balance for.\n   * @param blockTag The optional block number or hash to get the balance for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getBalance(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.getBalance(addressOrName, blockTag);\n  }\n\n  /**\n   * Returns the contract code of the provided address at the block. If there is\n   * no contract deployed, the result is `0x`.\n   *\n   * @param addressOrName The address or name of the account to get the code for.\n   * @param blockTag The optional block number or hash to get the code for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getCode(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.getCode(addressOrName, blockTag);\n  }\n\n  /**\n   * Return the value of the provided position at the provided address, at the\n   * provided block in `Bytes32` format.\n   *\n   * @param addressOrName The address or name of the account to get the code for.\n   * @param position The position of the storage slot to get.\n   * @param blockTag The optional block number or hash to get the code for.\n   *   Defaults to 'latest' if unspecified.\n   * @public\n   */\n  async getStorageAt(\n    addressOrName: string | Promise<string>,\n    position: BigNumberish | Promise<BigNumberish>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.getStorageAt(addressOrName, position, blockTag);\n  }\n\n  /**\n   * Returns the number of transactions ever sent from the provided address, as\n   * of the provided block tag. This value is used as the nonce for the next\n   * transaction from the address sent to the network.\n   *\n   * @param addressOrName The address or name of the account to get the nonce for.\n   * @param blockTag The optional block number or hash to get the nonce for.\n   * @public\n   */\n  async getTransactionCount(\n    addressOrName: string | Promise<string>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<number> {\n    const provider = await this.config.getProvider();\n    return provider.getTransactionCount(addressOrName, blockTag);\n  }\n\n  /**\n   * Returns the block from the network based on the provided block number or\n   * hash. Transactions on the block are represented as an array of transaction\n   * hashes. To get the full transaction details on the block, use\n   * {@link getBlockWithTransactions} instead.\n   *\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\n   * @public\n   */\n  async getBlock(\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>\n  ): Promise<Block> {\n    const provider = await this.config.getProvider();\n    return provider.getBlock(blockHashOrBlockTag);\n  }\n\n  /**\n   * Returns the block from the network based on the provided block number or\n   * hash. Transactions on the block are represented as an array of\n   * {@link TransactionResponse} objects.\n   *\n   * @param blockHashOrBlockTag The block number or hash to get the block for.\n   * @public\n   */\n  async getBlockWithTransactions(\n    blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>\n  ): Promise<BlockWithTransactions> {\n    const provider = await this.config.getProvider();\n    return provider.getBlockWithTransactions(blockHashOrBlockTag);\n  }\n\n  /**\n   * Returns the {@link EthersNetworkAlias} Alchemy is connected to.\n   *\n   * @public\n   */\n  async getNetwork(): Promise<EthersNetworkAlias> {\n    const provider = await this.config.getProvider();\n    return provider.getNetwork();\n  }\n\n  /**\n   * Returns the block number of the most recently mined block.\n   *\n   * @public\n   */\n  async getBlockNumber(): Promise<number> {\n    const provider = await this.config.getProvider();\n    return provider.getBlockNumber();\n  }\n\n  /**\n   * Returns the best guess of the current gas price to use in a transaction.\n   *\n   * @public\n   */\n  async getGasPrice(): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.getGasPrice();\n  }\n\n  /**\n   * Returns the recommended fee data to use in a transaction.\n   *\n   * For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas\n   * should be used.\n   *\n   * For legacy transactions and networks which do not support EIP-1559, the\n   * gasPrice should be used.\n   *\n   * @public\n   */\n  async getFeeData(): Promise<FeeData> {\n    const provider = await this.config.getProvider();\n    return provider.getFeeData();\n  }\n\n  /**\n   * Returns a Promise which will stall until the network has heen established,\n   * ignoring errors due to the target node not being active yet.\n   *\n   * This can be used for testing or attaching scripts to wait until the node is\n   * up and running smoothly.\n   *\n   * @public\n   */\n  async ready(): Promise<EthersNetworkAlias> {\n    const provider = await this.config.getProvider();\n    return provider.ready;\n  }\n\n  /**\n   * Returns the result of executing the transaction, using call. A call does\n   * not require any ether, but cannot change any state. This is useful for\n   * calling getters on Contracts.\n   *\n   * @param transaction The transaction to execute.\n   * @param blockTag The optional block number or hash to get the call for.\n   * @public\n   */\n  async call(\n    transaction: Deferrable<TransactionRequest>,\n    blockTag?: BlockTag | Promise<BlockTag>\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    return provider.call(transaction, blockTag);\n  }\n\n  /**\n   * Returns an estimate of the amount of gas that would be required to submit\n   * transaction to the network.\n   *\n   * An estimate may not be accurate since there could be another transaction on\n   * the network that was not accounted for, but after being mined affects the\n   * relevant state.\n   *\n   * This is an alias for {@link TransactNamespace.estimateGas}.\n   *\n   * @param transaction The transaction to estimate gas for.\n   * @public\n   */\n  async estimateGas(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.estimateGas(transaction);\n  }\n\n  /**\n   * Returns the transaction with hash or null if the transaction is unknown.\n   *\n   * If a transaction has not been mined, this method will search the\n   * transaction pool. Various backends may have more restrictive transaction\n   * pool access (e.g. if the gas price is too low or the transaction was only\n   * recently sent and not yet indexed) in which case this method may also return null.\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransaction(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionResponse | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransaction(transactionHash);\n  }\n\n  /**\n   * Returns the transaction receipt for hash or null if the transaction has not\n   * been mined.\n   *\n   * To stall until the transaction has been mined, consider the\n   * waitForTransaction method below.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransactionReceipt(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransactionReceipt(transactionHash);\n  }\n\n  /**\n   * Submits transaction to the network to be mined. The transaction must be\n   * signed, and be valid (i.e. the nonce is correct and the account has\n   * sufficient balance to pay for the transaction).\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param signedTransaction The signed transaction to send.\n   * @public\n   */\n  async sendTransaction(\n    signedTransaction: string | Promise<string>\n  ): Promise<TransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider.sendTransaction(signedTransaction);\n  }\n\n  /**\n   * Returns a promise which will not resolve until specified transaction hash is mined.\n   *\n   * If {@link confirmations} is 0, this method is non-blocking and if the\n   * transaction has not been mined returns null. Otherwise, this method will\n   * block until the transaction has confirmed blocks mined on top of the block\n   * in which it was mined.\n   *\n   * NOTE: This is an alias for {@link TransactNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to wait for.\n   * @param confirmations The number of blocks to wait for.\n   * @param timeout The maximum time to wait for the transaction to confirm.\n   * @public\n   */\n  async waitForTransaction(\n    transactionHash: string,\n    confirmations?: number,\n    timeout?: number\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.waitForTransaction(transactionHash, confirmations, timeout);\n  }\n\n  /**\n   * Returns an array of logs that match the provided filter.\n   *\n   * @param filter The filter object to use.\n   * @public\n   */\n  async getLogs(\n    filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>\n  ): Promise<Array<Log>> {\n    const provider = await this.config.getProvider();\n    return provider.getLogs(filter);\n  }\n\n  /**\n   * Allows sending a raw message to the Alchemy backend.\n   *\n   * @param method The method to call.\n   * @param params The parameters to pass to the method.\n   * @public\n   */\n  async send(method: string, params: Array<any>): Promise<any> {\n    const provider = await this.config.getProvider();\n    return provider.send(method, params);\n  }\n\n  /**\n   * Finds the address that deployed the provided contract and block number it\n   * was deployed in.\n   *\n   * NOTE: This method performs a binary search across all blocks since genesis\n   * and can take a long time to complete. This method is a convenience method\n   * that will eventually be replaced by a single call to an Alchemy endpoint\n   * with this information cached.\n   *\n   * @param contractAddress - The contract address to find the deployer for.\n   * @beta\n   */\n  async findContractDeployer(contractAddress: string): Promise<DeployResult> {\n    const provider = await this.config.getProvider();\n    const currentBlockNum = await provider.getBlockNumber();\n    if (\n      (await provider.getCode(contractAddress, currentBlockNum)) ===\n      ETH_NULL_VALUE\n    ) {\n      throw new Error(`Contract '${contractAddress}' does not exist`);\n    }\n\n    // Binary search for the block number that the contract was deployed in.\n    const firstBlock = await binarySearchFirstBlock(\n      0,\n      currentBlockNum + 1,\n      contractAddress,\n      this.config\n    );\n\n    // Find the first transaction in the block that matches the provided address.\n    const txReceipts = await this.getTransactionReceipts({\n      blockNumber: toHex(firstBlock)\n    });\n    const matchingReceipt = txReceipts.receipts?.find(\n      receipt => receipt.contractAddress === contractAddress.toLowerCase()\n    );\n    return {\n      deployerAddress: matchingReceipt?.from,\n      blockNumber: firstBlock\n    };\n  }\n\n  /**\n   * Returns the ERC-20 token balances for a specific owner address.\n   *\n   * @param address The owner address to get the token balances for.\n   * @public\n   */\n  async getTokenBalances(address: string): Promise<TokenBalancesResponseErc20>;\n\n  /**\n   * Returns the token balances for a specific owner address given a list of contracts.\n   *\n   * @param address The owner address to get the token balances for.\n   * @param contractAddresses A list of contract addresses to check. If omitted,\n   *   all ERC-20 tokens will be checked.\n   * @public\n   */\n  async getTokenBalances(\n    address: string,\n    contractAddresses?: string[]\n  ): Promise<TokenBalancesResponse>;\n\n  /**\n   * Returns the ERC-20 token balances for a specific owner.\n   *\n   * This overload covers the erc-20 token type which includes a page key in the response.\n   *\n   * @param address The owner address to get the token balances for.\n   * @param options Token type options set to ERC-20 with optional page key.\n   * @public\n   */\n  async getTokenBalances(\n    address: string,\n    options: TokenBalancesOptionsErc20\n  ): Promise<TokenBalancesResponseErc20>;\n\n  /**\n   * Returns the token balances for a specific owner, fetching from the top 100\n   * tokens by 24 hour volume.\n   *\n   * This overload covers the default token type which includes a page key in\n   * the response.\n   *\n   * @param address The owner address to get the token balances for.\n   * @param options Token type options set to ERC-20 with optional page key.\n   * @public\n   */\n  async getTokenBalances(\n    address: string,\n    options: TokenBalancesOptionsDefaultTokens\n  ): Promise<TokenBalancesResponse>;\n  async getTokenBalances(\n    address: string,\n    contractAddressesOrOptions?:\n      | string[]\n      | TokenBalancesOptionsDefaultTokens\n      | TokenBalancesOptionsErc20\n  ) {\n    const provider = await this.config.getProvider();\n    if (Array.isArray(contractAddressesOrOptions)) {\n      if (contractAddressesOrOptions.length > 1500) {\n        throw new Error(\n          'You cannot pass in more than 1500 contract addresses to getTokenBalances()'\n        );\n      }\n      if (contractAddressesOrOptions.length === 0) {\n        throw new Error(\n          'getTokenBalances() requires at least one contractAddress when using an array'\n        );\n      }\n      return provider._send(\n        'alchemy_getTokenBalances',\n        [address, contractAddressesOrOptions],\n        'getTokenBalances'\n      );\n    } else {\n      const tokenType =\n        contractAddressesOrOptions === undefined\n          ? TokenBalanceType.ERC20\n          : contractAddressesOrOptions.type;\n      const params: Array<string | { pageKey: string }> = [address, tokenType];\n      if (\n        contractAddressesOrOptions?.type === TokenBalanceType.ERC20 &&\n        contractAddressesOrOptions.pageKey\n      ) {\n        params.push({ pageKey: contractAddressesOrOptions.pageKey });\n      }\n      return provider._send(\n        'alchemy_getTokenBalances',\n        params,\n        'getTokenBalances'\n      );\n    }\n  }\n\n  /**\n   * Returns metadata for a given token contract address.\n   *\n   * @param address The contract address to get metadata for.\n   * @public\n   */\n  async getTokenMetadata(address: string): Promise<TokenMetadataResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getTokenMetadata',\n      [address],\n      'getTokenMetadata'\n    );\n  }\n\n  /**\n   * Get transactions for specific addresses. See the web documentation for the\n   * full details:\n   * https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers\n   *\n   * This overload requires {@link AssetTransfersWithMetadataParams.withMetadata}\n   * to be set to `true`, which results in additional metadata returned in the\n   * response object.\n   *\n   * @param params An object containing fields for the asset transfer query\n   * @public\n   */\n  async getAssetTransfers(\n    params: AssetTransfersWithMetadataParams\n  ): Promise<AssetTransfersWithMetadataResponse>;\n\n  /**\n   * Get transactions for specific addresses. See the web documentation for the\n   * full details:\n   * https://docs.alchemy.com/alchemy/enhanced-apis/transfers-api#alchemy_getassettransfers\n   *\n   * @param params An object containing fields for the asset transfer query.\n   * @public\n   */\n  async getAssetTransfers(\n    params: AssetTransfersParams\n  ): Promise<AssetTransfersResponse>;\n  async getAssetTransfers(\n    params: AssetTransfersWithMetadataParams | AssetTransfersParams\n  ): Promise<AssetTransfersResponse | AssetTransfersWithMetadataResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getAssetTransfers',\n      [\n        {\n          ...params,\n          fromBlock:\n            params.fromBlock != null\n              ? formatBlock(params.fromBlock)\n              : undefined,\n          toBlock:\n            params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n          maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n        }\n      ],\n      'getAssetTransfers'\n    );\n  }\n\n  /**\n   * Gets all transaction receipts for a given block by number or block hash.\n   *\n   * @param params An object containing fields for the transaction receipt query.\n   * @public\n   */\n  async getTransactionReceipts(\n    params: TransactionReceiptsParams\n  ): Promise<TransactionReceiptsResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getTransactionReceipts',\n      [params],\n      'getTransactionReceipts'\n    );\n  }\n}\n\n/**\n * Perform a binary search between an integer range of block numbers to find the\n * block number where the contract was deployed.\n *\n * @internal\n */\nasync function binarySearchFirstBlock(\n  start: number,\n  end: number,\n  address: string,\n  config: AlchemyConfig\n): Promise<number> {\n  if (start >= end) {\n    return end;\n  }\n\n  const mid = Math.floor((start + end) / 2);\n  const provider = await config.getProvider();\n  const code = await provider.getCode(address, mid);\n  if (code === ETH_NULL_VALUE) {\n    return binarySearchFirstBlock(mid + 1, end, address, config);\n  }\n  return binarySearchFirstBlock(start, mid, address, config);\n}\n","/**\n * The SDK has 4 log levels and a 5th option for disabling all logging. By\n * default, the log level is set to INFO.\n *\n * The order is a follows: DEBUG < INFO < WARN < ERROR\n *\n * All log types above the current log level will be outputted.\n */\nexport enum LogLevel {\n  DEBUG,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The level of verbosity for the logger.\n *\n * @public\n */\nexport type LogLevelString = 'debug' | 'info' | 'warn' | 'error' | 'silent';\n\nconst logLevelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR,\n  silent: LogLevel.SILENT\n};\n\n// HACKY: Use the console method as a string rather than the function itself\n// in order to allow for mocking in tests.\nconst logLevelToConsoleFn = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\nconst DEFAULT_LOG_LEVEL = LogLevel.INFO;\n\n/**\n * Configures the verbosity of logging. The default log level is `info`.\n *\n * @param logLevel - The verbosity of logging. Can be any of the following values:\n *\n *   - `debug`: The most verbose logging level.\n *   - `info`: The default logging level.\n *   - `warn`: A logging level for non-critical issues.\n *   - `error`: A logging level for critical issues.\n *   - `silent`: Turn off all logging.\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  loggerClient.logLevel = logLevelStringToEnum[logLevel];\n}\n\nexport function logDebug(message: string, ...args: unknown[]): void {\n  loggerClient.debug(message, args);\n}\n\nexport function logInfo(message: string, ...args: unknown[]): void {\n  loggerClient.info(message, args);\n}\n\nexport function logWarn(message: string, ...args: unknown[]): void {\n  loggerClient.warn(message, args);\n}\n\nexport function logError(message: string, ...args: unknown[]): void {\n  loggerClient.error(message, args);\n}\n\nexport class Logger {\n  /** The log level of the given Logger instance. */\n  private _logLevel = DEFAULT_LOG_LEVEL;\n\n  constructor() {}\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  debug(...args: unknown[]): void {\n    this._log(LogLevel.DEBUG, ...args);\n  }\n\n  info(...args: unknown[]): void {\n    this._log(LogLevel.INFO, ...args);\n  }\n\n  warn(...args: unknown[]): void {\n    this._log(LogLevel.WARN, ...args);\n  }\n\n  error(...args: unknown[]): void {\n    this._log(LogLevel.ERROR, ...args);\n  }\n\n  /**\n   * Forwards log messages to their corresponding console counterparts if the\n   * log level allows it.\n   */\n  private _log(logLevel: LogLevel, ...args: unknown[]): void {\n    if (logLevel < this._logLevel) {\n      return;\n    }\n    const now = new Date().toISOString();\n    const method =\n      logLevelToConsoleFn[logLevel as keyof typeof logLevelToConsoleFn];\n    if (method) {\n      console[method as 'log' | 'info' | 'warn' | 'error'](\n        `[${now}] Alchemy:`,\n        ...args.map(stringify)\n      );\n    } else {\n      throw new Error(\n        `Logger received an invalid logLevel (value: ${logLevel})`\n      );\n    }\n  }\n}\n\nfunction stringify(obj: unknown): string | unknown {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return JSON.stringify(obj);\n    } catch (e) {\n      // Failed to convert to JSON, log the object directly.\n      return obj;\n    }\n  }\n}\n\n// Instantiate default logger for the SDK.\nconst loggerClient: Logger = new Logger();\n","// This file is autogenerated by injectVersion.js. Any changes will be\n// overwritten on commit!\nexport const VERSION = '2.2.0';\n","/**\n * Given a REST endpoint, method, and params, sends the request with axios and\n * returns the response.\n */\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\nimport { VERSION } from '../version';\nimport { IS_BROWSER } from './util';\n\n/**\n * Helper function to send http requests using Axis.\n *\n * @private\n */\nexport function sendAxiosRequest<Req, Res>(\n  baseUrl: string,\n  restApiName: string,\n  methodName: string,\n  params: Req,\n  overrides?: AxiosRequestConfig\n): Promise<AxiosResponse<Res>> {\n  const requestUrl = baseUrl + '/' + restApiName;\n  const config: AxiosRequestConfig = {\n    ...overrides,\n    headers: {\n      ...overrides?.headers,\n      ...(IS_BROWSER && { 'Accept-Encoding': 'gzip' }),\n      'Alchemy-Ethers-Sdk-Version': VERSION,\n      'Alchemy-Ethers-Sdk-Method': methodName\n    },\n    method: overrides?.method ?? 'GET',\n    url: requestUrl,\n    params\n  };\n  return axios(config);\n}\n","import { logDebug } from '../util/logger';\n\nexport const DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nexport const DEFAULT_BACKOFF_MULTIPLIER = 1.5;\nexport const DEFAULT_BACKOFF_MAX_DELAY_MS = 30 * 1000;\nexport const DEFAULT_BACKOFF_MAX_ATTEMPTS = 5;\n\n/**\n * Helper class for implementing exponential backoff and max retry attempts.\n *\n * @private\n * @internal\n */\nexport class ExponentialBackoff {\n  private readonly initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n  private readonly backoffMultiplier = DEFAULT_BACKOFF_MULTIPLIER;\n  private readonly maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;\n\n  private numAttempts = 0;\n  private currentDelayMs = 0;\n  private isInBackoff = false;\n\n  constructor(private readonly maxAttempts = DEFAULT_BACKOFF_MAX_ATTEMPTS) {}\n\n  /**\n   * Returns a promise that resolves after the the backoff delay. The delay is\n   * increased for each attempt. The promise is rejected if the maximum number\n   * of attempts is exceeded.\n   */\n  // TODO: beautify this into an async iterator.\n  backoff(): Promise<void> {\n    if (this.numAttempts >= this.maxAttempts) {\n      return Promise.reject(\n        new Error(`Exceeded maximum number of attempts: ${this.maxAttempts}`)\n      );\n    }\n    if (this.isInBackoff) {\n      return Promise.reject(\n        new Error('A backoff operation is already in progress')\n      );\n    }\n\n    const backoffDelayWithJitterMs = this.withJitterMs(this.currentDelayMs);\n    if (backoffDelayWithJitterMs > 0) {\n      logDebug(\n        'ExponentialBackoff.backoff',\n        `Backing off for ${backoffDelayWithJitterMs}ms`\n      );\n    }\n\n    // Calculate the next delay.\n    this.currentDelayMs *= this.backoffMultiplier;\n    this.currentDelayMs = Math.max(this.currentDelayMs, this.initialDelayMs);\n    this.currentDelayMs = Math.min(this.currentDelayMs, this.maxDelayMs);\n    this.numAttempts += 1;\n\n    return new Promise(resolve => {\n      this.isInBackoff = true;\n      setTimeout(() => {\n        this.isInBackoff = false;\n        resolve();\n      }, backoffDelayWithJitterMs);\n    });\n  }\n\n  /**\n   * Applies +/- 50% jitter to the backoff delay, up to the max delay cap.\n   *\n   * @private\n   * @param delayMs\n   */\n  private withJitterMs(delayMs: number): number {\n    return Math.min(delayMs + (Math.random() - 0.5) * delayMs, this.maxDelayMs);\n  }\n}\n","import axios, { AxiosError, AxiosRequestConfig } from 'axios';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { AlchemyApiType } from '../util/const';\nimport { logDebug, logInfo } from '../util/logger';\nimport { sendAxiosRequest } from '../util/sendRest';\nimport { ExponentialBackoff } from './backoff';\n\n/**\n * A wrapper function to make http requests and retry if the request fails.\n *\n * @internal\n */\n// TODO: Wrap Axios error in AlchemyError.\nexport async function requestHttpWithBackoff<Req, Res>(\n  config: AlchemyConfig,\n  apiType: AlchemyApiType,\n  restApiName: string,\n  methodName: string,\n  params: Req,\n  overrides?: AxiosRequestConfig\n): Promise<Res> {\n  let lastError: Error | undefined = undefined;\n  const backoff = new ExponentialBackoff(config.maxRetries);\n  for (let attempt = 0; attempt < config.maxRetries + 1; attempt++) {\n    try {\n      if (lastError !== undefined) {\n        logInfo('requestHttp', `Retrying after error: ${lastError.message}`);\n      }\n\n      try {\n        await backoff.backoff();\n      } catch (err) {\n        // Backoff errors when the maximum number of attempts is reached. Break\n        // out of the loop to preserve the last error.\n        break;\n      }\n\n      const response = await sendAxiosRequest<Req, Res>(\n        config._getRequestUrl(apiType),\n        restApiName,\n        methodName,\n        params,\n        overrides\n      );\n\n      if (response.status === 200) {\n        logDebug(restApiName, `Successful request: ${restApiName}`);\n        return response.data;\n      } else {\n        logInfo(\n          restApiName,\n          `Request failed: ${restApiName}, ${response.status}, ${response.data}`\n        );\n        lastError = new Error(response.status + ': ' + response.data);\n      }\n    } catch (err) {\n      if (!axios.isAxiosError(err) || err.response === undefined) {\n        throw err;\n      }\n      // TODO: Standardize all errors into AlchemyError\n      lastError = new Error(err.response.status + ': ' + err.response.data);\n      if (!isRetryableHttpError(err, apiType)) {\n        break;\n      }\n    }\n  }\n  return Promise.reject(lastError);\n}\n\nfunction isRetryableHttpError(\n  err: AxiosError,\n  apiType: AlchemyApiType\n): boolean {\n  // TODO: remove 500s after webhooks are more stable.\n  const retryableCodes =\n    apiType === AlchemyApiType.WEBHOOK ? [429, 500] : [429];\n  return (\n    err.response !== undefined && retryableCodes.includes(err.response.status)\n  );\n}\n\n/**\n * Fetches all pages in a paginated endpoint, given a `pageKey` field that\n * represents the property name containing the next page token.\n *\n * @internal\n */\nexport async function* paginateEndpoint<\n  ReqPageKey extends string,\n  ResPageKey extends string,\n  Req extends Partial<Record<string, any> & Record<ReqPageKey, string>>,\n  Res extends Partial<Record<string, any> & Record<ResPageKey, string>>\n>(\n  config: AlchemyConfig,\n  apiType: AlchemyApiType,\n  restApiName: string,\n  methodName: string,\n  reqPageKey: ReqPageKey,\n  resPageKey: ResPageKey,\n  params: Req\n): AsyncIterable<Res> {\n  let hasNext = true;\n  const requestParams = { ...params };\n  while (hasNext) {\n    const response = await requestHttpWithBackoff<Req, Res>(\n      config,\n      apiType,\n      restApiName,\n      methodName,\n      requestParams\n    );\n    yield response;\n    if (response[resPageKey] !== undefined) {\n      requestParams[reqPageKey] = response[resPageKey] as any;\n    } else {\n      hasNext = false;\n    }\n  }\n}\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\n\nimport { AlchemyConfig } from '../api/alchemy-config';\nimport { BaseNft, Nft, NftContract } from '../api/nft';\nimport {\n  GetBaseNftsForContractOptions,\n  GetBaseNftsForOwnerOptions,\n  GetFloorPriceResponse,\n  GetNftsForContractOptions,\n  GetNftsForOwnerOptions,\n  GetOwnersForContractOptions,\n  GetOwnersForContractResponse,\n  GetOwnersForContractWithTokenBalancesOptions,\n  GetOwnersForContractWithTokenBalancesResponse,\n  GetOwnersForNftResponse,\n  NftAttributeRarity,\n  NftContractBaseNftsResponse,\n  NftContractNftsResponse,\n  NftTokenType,\n  OwnedBaseNft,\n  OwnedBaseNftsResponse,\n  OwnedNft,\n  OwnedNftsResponse,\n  RefreshContractResult,\n  RefreshState\n} from '../types/types';\nimport { AlchemyApiType } from '../util/const';\nimport {\n  getBaseNftFromRaw,\n  getNftContractFromRaw,\n  getNftFromRaw,\n  getNftRarityFromRaw\n} from '../util/util';\nimport { paginateEndpoint, requestHttpWithBackoff } from './dispatch';\nimport {\n  RawBaseNft,\n  RawContractBaseNft,\n  RawContractNft,\n  RawGetBaseNftsForContractResponse,\n  RawGetBaseNftsResponse,\n  RawGetNftsForContractResponse,\n  RawGetNftsResponse,\n  RawGetOwnersForContractResponse,\n  RawNft,\n  RawNftAttributeRarity,\n  RawNftContract,\n  RawOwnedBaseNft,\n  RawOwnedNft,\n  RawReingestContractResponse\n} from './raw-interfaces';\n\nexport async function getNftMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  tokenType?: NftTokenType,\n  tokenUriTimeoutInMs?: number,\n  srcMethod = 'getNftMetadata'\n): Promise<Nft> {\n  const response = await requestHttpWithBackoff<GetNftMetadataParams, RawNft>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadata',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      tokenType: tokenType !== NftTokenType.UNKNOWN ? tokenType : undefined,\n      tokenUriTimeoutInMs\n    }\n  );\n  return getNftFromRaw(response, contractAddress);\n}\n\nexport async function getContractMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'getContractMetadata'\n): Promise<NftContract> {\n  const response = await requestHttpWithBackoff<\n    GetContractMetadataParams,\n    RawNftContract\n  >(config, AlchemyApiType.NFT, 'getContractMetadata', srcMethod, {\n    contractAddress\n  });\n\n  return getNftContractFromRaw(response);\n}\n\nexport async function* getNftsForOwnerIterator(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions,\n  srcMethod = 'getNftsForOwnerIterator'\n): AsyncIterable<OwnedBaseNft | OwnedNft> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  for await (const response of paginateEndpoint(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTs',\n    srcMethod,\n    'pageKey',\n    'pageKey',\n    {\n      contractAddresses: options?.contractAddresses,\n      pageKey: options?.pageKey,\n      filters: options?.excludeFilters,\n      owner,\n      withMetadata\n    }\n  )) {\n    for (const ownedNft of response.ownedNfts as\n      | RawOwnedNft[]\n      | RawOwnedBaseNft[]) {\n      yield {\n        ...nftFromGetNftResponse(ownedNft),\n        balance: parseInt(ownedNft.balance)\n      };\n    }\n  }\n}\n\nexport async function getNftsForOwner(\n  config: AlchemyConfig,\n  owner: string,\n  options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions,\n  srcMethod = 'getNftsForOwner'\n): Promise<OwnedNftsResponse | OwnedBaseNftsResponse> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  const response = await requestHttpWithBackoff<\n    GetNftsAlchemyParams,\n    RawGetBaseNftsResponse | RawGetNftsResponse\n  >(config, AlchemyApiType.NFT, 'getNFTs', srcMethod, {\n    contractAddresses: options?.contractAddresses,\n    pageKey: options?.pageKey,\n    filters: options?.excludeFilters,\n    owner,\n    pageSize: options?.pageSize,\n    withMetadata,\n    tokenUriTimeoutInMs: options?.tokenUriTimeoutInMs\n  });\n  return {\n    ownedNfts: response.ownedNfts.map(res => ({\n      ...nftFromGetNftResponse(res),\n      balance: parseInt(res.balance)\n    })),\n    pageKey: response.pageKey,\n    totalCount: response.totalCount\n  };\n}\n\nexport async function getNftsForContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?: GetBaseNftsForContractOptions | GetNftsForContractOptions,\n  srcMethod = 'getNftsForContract'\n): Promise<NftContractNftsResponse | NftContractBaseNftsResponse> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  const response = await requestHttpWithBackoff<\n    GetNftsForContractAlchemyParams,\n    RawGetBaseNftsForContractResponse | RawGetNftsForContractResponse\n  >(config, AlchemyApiType.NFT, 'getNFTsForCollection', srcMethod, {\n    contractAddress,\n    startToken: options?.pageKey,\n    withMetadata,\n    limit: options?.pageSize ?? undefined,\n    tokenUriTimeoutInMs: 50\n  });\n\n  return {\n    nfts: response.nfts.map(res =>\n      nftFromGetNftNftContractResponse(res, contractAddress)\n    ),\n    pageKey: response.nextToken\n  };\n}\n\nexport async function* getNftsForContractIterator(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?: GetBaseNftsForContractOptions | GetNftsForContractOptions,\n  srcMethod = 'getNftsForContractIterator'\n): AsyncIterable<BaseNft | Nft> {\n  const withMetadata = omitMetadataToWithMetadata(options?.omitMetadata);\n  for await (const response of paginateEndpoint(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTsForCollection',\n    srcMethod,\n    'startToken',\n    'nextToken',\n    {\n      contractAddress,\n      startToken: options?.pageKey,\n      withMetadata\n    }\n  )) {\n    for (const nft of response.nfts as\n      | RawContractBaseNft[]\n      | RawContractNft[]) {\n      yield nftFromGetNftNftContractResponse(nft, contractAddress);\n    }\n  }\n}\n\nexport async function getOwnersForContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  options?:\n    | GetOwnersForContractWithTokenBalancesOptions\n    | GetOwnersForContractOptions,\n  srcMethod = 'getOwnersForContract'\n): Promise<\n  GetOwnersForContractResponse | GetOwnersForContractWithTokenBalancesResponse\n> {\n  // Cast to `any` to avoid more type wrangling.\n  const response: any = await requestHttpWithBackoff<\n    GetOwnersForNftContractAlchemyParams,\n    RawGetOwnersForContractResponse\n  >(config, AlchemyApiType.NFT, 'getOwnersForCollection', srcMethod, {\n    ...options,\n    contractAddress\n  });\n\n  return {\n    owners: response.ownerAddresses,\n\n    // Only include the pageKey in the final response if it's defined\n    ...(response.pageKey !== undefined && { pageKey: response.pageKey })\n  };\n}\n\nexport async function getOwnersForNft(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod = 'getOwnersForNft'\n): Promise<GetOwnersForNftResponse> {\n  return requestHttpWithBackoff(\n    config,\n    AlchemyApiType.NFT,\n    'getOwnersForToken',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString()\n    }\n  );\n}\n\nexport async function checkNftOwnership(\n  config: AlchemyConfig,\n  owner: string,\n  contractAddresses: string[],\n  srcMethod = 'checkNftOwnership'\n): Promise<boolean> {\n  if (contractAddresses.length === 0) {\n    throw new Error('Must provide at least one contract address');\n  }\n  const response = await getNftsForOwner(\n    config,\n    owner,\n    {\n      contractAddresses,\n      omitMetadata: true\n    },\n    srcMethod\n  );\n  return response.ownedNfts.length > 0;\n}\n\nexport async function verifyNftOwnership(\n  config: AlchemyConfig,\n  owner: string,\n  contractAddresses: string | string[],\n  srcMethod = 'verifyNftOwnership'\n): Promise<boolean | { [contractAddress: string]: boolean }> {\n  if (typeof contractAddresses === 'string') {\n    const response = await getNftsForOwner(\n      config,\n      owner,\n      {\n        contractAddresses: [contractAddresses],\n        omitMetadata: true\n      },\n      srcMethod\n    );\n    return response.ownedNfts.length > 0;\n  } else {\n    if (contractAddresses.length === 0) {\n      throw new Error('Must provide at least one contract address');\n    }\n    const response = await getNftsForOwner(\n      config,\n      owner,\n      {\n        contractAddresses,\n        omitMetadata: true\n      },\n      srcMethod\n    );\n\n    // Create map where all input contract addresses are set to false, then flip\n    // owned nfts to true.\n    const result = contractAddresses.reduce(\n      (acc: { [contractAddress: string]: boolean }, curr) => {\n        acc[curr] = false;\n        return acc;\n      },\n      {}\n    );\n    for (const nft of response.ownedNfts) {\n      result[nft.contract.address] = true;\n    }\n    return result;\n  }\n}\n\nexport async function isSpamContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'isSpamContract'\n): Promise<boolean> {\n  return requestHttpWithBackoff<IsSpamContractParams, boolean>(\n    config,\n    AlchemyApiType.NFT,\n    'isSpamContract',\n    srcMethod,\n    {\n      contractAddress\n    }\n  );\n}\n\nexport async function getSpamContracts(\n  config: AlchemyConfig,\n  srcMethod = 'getSpamContracts'\n): Promise<string[]> {\n  return requestHttpWithBackoff<undefined, string[]>(\n    config,\n    AlchemyApiType.NFT,\n    'getSpamContracts',\n    srcMethod,\n    undefined\n  );\n}\n\nexport async function getFloorPrice(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'getFloorPrice'\n): Promise<GetFloorPriceResponse> {\n  return requestHttpWithBackoff<GetFloorPriceParams, GetFloorPriceResponse>(\n    config,\n    AlchemyApiType.NFT,\n    'getFloorPrice',\n    srcMethod,\n    {\n      contractAddress\n    }\n  );\n}\n\nexport async function computeRarity(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod = 'computeRarity'\n): Promise<NftAttributeRarity[]> {\n  const response = await requestHttpWithBackoff<\n    ComputeRarityParams,\n    RawNftAttributeRarity[]\n  >(config, AlchemyApiType.NFT, 'computeRarity', srcMethod, {\n    contractAddress,\n    tokenId: BigNumber.from(tokenId).toString()\n  });\n\n  return getNftRarityFromRaw(response);\n}\n\nexport async function refreshNftMetadata(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod = 'refreshNftMetadata'\n): Promise<boolean> {\n  const tokenIdString = BigNumber.from(tokenId!).toString();\n  const first = await getNftMetadata(\n    config,\n    contractAddress,\n    tokenIdString,\n    undefined,\n    undefined,\n    srcMethod\n  );\n  const second = await refresh(\n    config,\n    contractAddress,\n    tokenIdString,\n    srcMethod\n  );\n  return first.timeLastUpdated !== second.timeLastUpdated;\n}\n\nexport async function refreshContract(\n  config: AlchemyConfig,\n  contractAddress: string,\n  srcMethod = 'refreshContract'\n): Promise<RefreshContractResult> {\n  const response = await requestHttpWithBackoff<\n    ReingestContractParams,\n    RawReingestContractResponse\n  >(config, AlchemyApiType.NFT, 'reingestContract', srcMethod, {\n    contractAddress\n  });\n\n  return {\n    contractAddress: response.contractAddress,\n    refreshState: parseReingestionState(response.reingestionState),\n    progress: response.progress\n  };\n}\n\nasync function refresh(\n  config: AlchemyConfig,\n  contractAddress: string,\n  tokenId: BigNumberish,\n  srcMethod: string\n): Promise<Nft> {\n  const response = await requestHttpWithBackoff<GetNftMetadataParams, RawNft>(\n    config,\n    AlchemyApiType.NFT,\n    'getNFTMetadata',\n    srcMethod,\n    {\n      contractAddress,\n      tokenId: BigNumber.from(tokenId!).toString(),\n      refreshCache: true\n    }\n  );\n  return getNftFromRaw(response, contractAddress);\n}\n\n/**\n * Helper method to convert a NFT response received from Alchemy backend to an\n * SDK NFT type.\n *\n * @internal\n */\nfunction nftFromGetNftResponse(\n  ownedNft: RawOwnedBaseNft | RawOwnedNft\n): Nft | BaseNft {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft, ownedNft.contract.address);\n  } else {\n    return getBaseNftFromRaw(ownedNft, ownedNft.contract.address);\n  }\n}\n\n/**\n * Helper method to convert a NFT response received from Alchemy backend to an\n * SDK NFT type.\n *\n * @internal\n */\nfunction nftFromGetNftNftContractResponse(\n  ownedNft: RawContractBaseNft | RawContractNft,\n  contractAddress: string\n): Nft | BaseNft {\n  if (isNftWithMetadata(ownedNft)) {\n    return getNftFromRaw(ownedNft, contractAddress);\n  } else {\n    return getBaseNftFromRaw(ownedNft, contractAddress);\n  }\n}\n\n/** @internal */\n// TODO: more comprehensive type check\nfunction isNftWithMetadata(response: RawBaseNft | RawNft): response is RawNft {\n  return (response as RawNft).title !== undefined;\n}\n\n/**\n * Flips the `omitMetadata` SDK parameter type to the `withMetadata` parameter\n * required by the Alchemy API. If `omitMetadata` is undefined, the SDK defaults\n * to including metadata.\n *\n * @internal\n */\nfunction omitMetadataToWithMetadata(\n  omitMetadata: boolean | undefined\n): boolean {\n  return omitMetadata === undefined ? true : !omitMetadata;\n}\n\nfunction parseReingestionState(reingestionState: string): RefreshState {\n  switch (reingestionState) {\n    case 'does_not_exist':\n      return RefreshState.DOES_NOT_EXIST;\n    case 'already_queued':\n      return RefreshState.ALREADY_QUEUED;\n    case 'in_progress':\n      return RefreshState.IN_PROGRESS;\n    case 'finished':\n      return RefreshState.FINISHED;\n    case 'queued':\n      return RefreshState.QUEUED;\n    case 'queue_failed':\n      return RefreshState.QUEUE_FAILED;\n    default:\n      throw new Error('Unknown reingestion state: ' + reingestionState);\n  }\n}\n\n/**\n * Interface for the `getNftsForNftContract` endpoint. The main difference is\n * that the endpoint has a `startToken` parameter, but the SDK standardizes all\n * pagination parameters to `pageKey`.\n *\n * @internal\n */\ninterface GetNftsForContractAlchemyParams {\n  contractAddress: string;\n  startToken?: string;\n  withMetadata: boolean;\n  limit?: number;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `getNfts` endpoint. The main difference is that the\n * endpoint has a `withMetadata` parameter, but the SDK exposes the parameter as\n * `omitMetadata`.\n *\n * @internal\n */\ninterface GetNftsAlchemyParams {\n  owner: string;\n  pageKey?: string;\n  contractAddresses?: string[];\n  filters?: string[];\n  pageSize?: number;\n  withMetadata: boolean;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `getNftMetadata` endpoint.\n *\n * @internal\n */\ninterface GetNftMetadataParams {\n  contractAddress: string;\n  tokenId: string;\n  tokenType?: NftTokenType;\n  refreshCache?: boolean;\n  tokenUriTimeoutInMs?: number;\n}\n\n/**\n * Interface for the `isSpamContract` endpoint.\n *\n * @internal\n */\ninterface IsSpamContractParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getNftContractMetadata` endpoint.\n *\n * @internal\n */\ninterface GetContractMetadataParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getOwnersForNftContract` endpoint.\n *\n * @internal\n */\ninterface GetOwnersForNftContractAlchemyParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `getFloorPrice` endpoint.\n *\n * @internal\n */\ninterface GetFloorPriceParams {\n  contractAddress: string;\n}\n\n/**\n * Interface for the `computeRarity` endpoint.\n *\n * @internal\n */\ninterface ComputeRarityParams {\n  contractAddress: string;\n  tokenId: string;\n}\n\ninterface ReingestContractParams {\n  contractAddress: string;\n}\n","import type { BigNumberish } from '@ethersproject/bignumber';\n\nimport {\n  checkNftOwnership,\n  computeRarity,\n  getContractMetadata,\n  getFloorPrice,\n  getNftMetadata,\n  getNftsForContract,\n  getNftsForContractIterator,\n  getNftsForOwner,\n  getNftsForOwnerIterator,\n  getOwnersForContract,\n  getOwnersForNft,\n  getSpamContracts,\n  isSpamContract,\n  refreshContract,\n  refreshNftMetadata,\n  verifyNftOwnership\n} from '../internal/nft-api';\nimport {\n  GetBaseNftsForContractOptions,\n  GetBaseNftsForOwnerOptions,\n  GetFloorPriceResponse,\n  GetNftsForContractOptions,\n  GetNftsForOwnerOptions,\n  GetOwnersForContractOptions,\n  GetOwnersForContractResponse,\n  GetOwnersForContractWithTokenBalancesOptions,\n  GetOwnersForContractWithTokenBalancesResponse,\n  GetOwnersForNftResponse,\n  NftAttributeRarity,\n  NftContractBaseNftsResponse,\n  NftContractNftsResponse,\n  NftTokenType,\n  OwnedBaseNft,\n  OwnedBaseNftsResponse,\n  OwnedNft,\n  OwnedNftsResponse,\n  RefreshContractResult\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { BaseNft, Nft, NftContract } from './nft';\n\n/**\n * The NFT namespace contains all the functionality related to NFTs.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.nft`.\n */\nexport class NftNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get the NFT metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - Token id of the NFT.\n   * @param tokenType - Optionally specify the type of token to speed up the query.\n   * @param tokenUriTimeoutInMs - No set timeout by default - When metadata is\n   *   requested, this parameter is the timeout (in milliseconds) for the\n   *   website hosting the metadata to respond. If you want to only access the\n   *   cache and not live fetch any metadata for cache misses then set this value to 0.\n   * @public\n   */\n  getNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish,\n    tokenType?: NftTokenType,\n    tokenUriTimeoutInMs?: number\n  ): Promise<Nft> {\n    return getNftMetadata(\n      this.config,\n      contractAddress,\n      tokenId,\n      tokenType,\n      tokenUriTimeoutInMs\n    );\n  }\n\n  /**\n   * Get the NFT collection metadata associated with the provided parameters.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @public\n   */\n  getContractMetadata(contractAddress: string): Promise<NftContract> {\n    return getContractMetadata(this.config, contractAddress);\n  }\n\n  /**\n   * Fetches all NFTs for a given owner and yields them in an async iterable.\n   *\n   * This method returns the full NFT for the owner and pages through all page\n   * keys until all NFTs have been fetched.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetNftsForOwnerOptions\n  ): AsyncIterable<OwnedNft>;\n  /**\n   * Fetches all NFTs for a given owner and yields them in an async iterable.\n   *\n   * This method returns the base NFTs that omit the associated metadata and\n   * pages through all page keys until all NFTs have been fetched.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetBaseNftsForOwnerOptions\n  ): AsyncIterable<OwnedBaseNft>;\n  getNftsForOwnerIterator(\n    owner: string,\n    options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions\n  ): AsyncIterable<OwnedBaseNft | OwnedNft> {\n    return getNftsForOwnerIterator(this.config, owner, options);\n  }\n\n  /**\n   * Get all NFTs for an owner.\n   *\n   * This method returns the full NFTs in the contract. To get all NFTs without\n   * their associated metadata, use {@link GetBaseNftsForOwnerOptions}.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwner(\n    owner: string,\n    options?: GetNftsForOwnerOptions\n  ): Promise<OwnedNftsResponse>;\n  /**\n   * Get all base NFTs for an owner.\n   *\n   * This method returns the base NFTs that omit the associated metadata. To get\n   * all NFTs with their associated metadata, use {@link GetNftsForOwnerOptions}.\n   *\n   * @param owner - The address of the owner.\n   * @param options - The optional parameters to use for the request.\n   * @public\n   */\n  getNftsForOwner(\n    owner: string,\n    options?: GetBaseNftsForOwnerOptions\n  ): Promise<OwnedBaseNftsResponse>;\n  getNftsForOwner(\n    owner: string,\n    options?: GetNftsForOwnerOptions | GetBaseNftsForOwnerOptions\n  ): Promise<OwnedNftsResponse | OwnedBaseNftsResponse> {\n    return getNftsForOwner(this.config, owner, options);\n  }\n\n  /**\n   * Get all NFTs for a given contract address.\n   *\n   * This method returns the full NFTs in the contract. To get all NFTs without\n   * their associated metadata, use {@link GetBaseNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The parameters to use for the request. or\n   *   {@link NftContractNftsResponse} response.\n   * @beta\n   */\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetNftsForContractOptions\n  ): Promise<NftContractNftsResponse>;\n  /**\n   * Get all base NFTs for a given contract address.\n   *\n   * This method returns the base NFTs that omit the associated metadata. To get\n   * all NFTs with their associated metadata, use {@link GetNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions\n  ): Promise<NftContractBaseNftsResponse>;\n  getNftsForContract(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions | GetNftsForContractOptions\n  ): Promise<NftContractNftsResponse | NftContractBaseNftsResponse> {\n    return getNftsForContract(this.config, contractAddress, options);\n  }\n\n  /**\n   * Fetches all NFTs for a given contract address and yields them in an async iterable.\n   *\n   * This method returns the full NFTs in the contract and pages through all\n   * page keys until all NFTs have been fetched. To get all NFTs without their\n   * associated metadata, use {@link GetBaseNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetNftsForContractOptions\n  ): AsyncIterable<Nft>;\n  /**\n   * Fetches all base NFTs for a given contract address and yields them in an\n   * async iterable.\n   *\n   * This method returns the base NFTs that omit the associated metadata and\n   * pages through all page keys until all NFTs have been fetched. To get all\n   * NFTs with their associated metadata, use {@link GetNftsForContractOptions}.\n   *\n   * @param contractAddress - The contract address of the NFT contract.\n   * @param options - The optional parameters to use for the request.\n   * @beta\n   */\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions\n  ): AsyncIterable<BaseNft>;\n  getNftsForContractIterator(\n    contractAddress: string,\n    options?: GetBaseNftsForContractOptions | GetNftsForContractOptions\n  ): AsyncIterable<BaseNft | Nft> {\n    return getNftsForContractIterator(this.config, contractAddress, options);\n  }\n\n  /**\n   * Gets all the owners for a given NFT contract along with the token balance.\n   *\n   * @param contractAddress - The NFT contract to get the owners for.\n   * @param options Optional parameters to use for the request.\n   * @public\n   */\n  getOwnersForContract(\n    contractAddress: string,\n    options: GetOwnersForContractWithTokenBalancesOptions\n  ): Promise<GetOwnersForContractWithTokenBalancesResponse>;\n\n  /**\n   * Gets all the owners for a given NFT contract.\n   *\n   * Note that token balances are omitted by default. To include token balances\n   * for each owner, use {@link GetOwnersForContractWithTokenBalancesOptions},\n   * which has the `withTokenBalances` field set to `true`.\n   *\n   * @param contractAddress - The NFT contract to get the owners for.\n   * @param options Optional parameters to use for the request.\n   * @public\n   */\n  getOwnersForContract(\n    contractAddress: string,\n    options?: GetOwnersForContractOptions\n  ): Promise<GetOwnersForContractResponse>;\n  getOwnersForContract(\n    contractAddress: string,\n    options?:\n      | GetOwnersForContractOptions\n      | GetOwnersForContractWithTokenBalancesOptions\n  ): Promise<\n    GetOwnersForContractResponse | GetOwnersForContractWithTokenBalancesResponse\n  > {\n    return getOwnersForContract(this.config, contractAddress, options);\n  }\n\n  /**\n   * Gets all the owners for a given NFT contract address and token ID.\n   *\n   * @param contractAddress - The NFT contract address.\n   * @param tokenId - Token id of the NFT.\n   * @beta\n   */\n  getOwnersForNft(\n    contractAddress: string,\n    tokenId: BigNumberish\n  ): Promise<GetOwnersForNftResponse> {\n    return getOwnersForNft(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * DEPRECATED - Checks that the provided owner address owns one of more of the\n   * provided NFTs.\n   *\n   * @deprecated - Use {@link verifyNftOwnership} instead. This method will be\n   *   removed in a future release.\n   * @param owner - The owner address to check.\n   * @param contractAddresses - An array of NFT contract addresses to check ownership for.\n   */\n  checkNftOwnership(\n    owner: string,\n    contractAddresses: string[]\n  ): Promise<boolean> {\n    return checkNftOwnership(this.config, owner, contractAddresses);\n  }\n\n  /**\n   * Checks that the provided owner address owns one of more of the provided\n   * NFT. Returns a boolean indicating whether the owner address owns the provided NFT.\n   *\n   * @param owner - The owner address to check.\n   * @param contractAddress - An NFT contract address to check ownership for.\n   */\n  verifyNftOwnership(owner: string, contractAddress: string): Promise<boolean>;\n\n  /**\n   * Checks which of the provided NFTs the owner address owns. Returns a map of\n   * contract address to a boolean indicating whether the owner address owns the NFT.\n   *\n   * @param owner - The owner address to check.\n   * @param contractAddresses - An array NFT contract address to check ownership for.\n   */\n  verifyNftOwnership(\n    owner: string,\n    contractAddresses: string[]\n  ): Promise<{ [contractAddress: string]: boolean }>;\n  verifyNftOwnership(\n    owner: string,\n    contractAddress: string | string[]\n  ): Promise<boolean | { [contractAddress: string]: boolean }> {\n    return verifyNftOwnership(this.config, owner, contractAddress);\n  }\n\n  /**\n   * Returns whether a contract is marked as spam or not by Alchemy. For more\n   * information on how we classify spam, go to our NFT API FAQ at\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   *\n   * @param contractAddress - The contract address to check.\n   * @beta\n   */\n  isSpamContract(contractAddress: string): Promise<boolean> {\n    return isSpamContract(this.config, contractAddress);\n  }\n\n  /**\n   * Returns a list of all spam contracts marked by Alchemy. For details on how\n   * Alchemy marks spam contracts, go to\n   * https://docs.alchemy.com/alchemy/enhanced-apis/nft-api/nft-api-faq#nft-spam-classification.\n   *\n   * @beta\n   */\n  getSpamContracts(): Promise<string[]> {\n    return getSpamContracts(this.config);\n  }\n\n  /**\n   * Returns the floor prices of a NFT contract by marketplace.\n   *\n   * @param contractAddress - The contract address for the NFT collection.\n   * @beta\n   */\n  getFloorPrice(contractAddress: string): Promise<GetFloorPriceResponse> {\n    return getFloorPrice(this.config, contractAddress);\n  }\n\n  /**\n   * Get the rarity of each attribute of an NFT.\n   *\n   * @param contractAddress - Contract address for the NFT collection.\n   * @param tokenId - Token id of the NFT.\n   */\n  computeRarity(\n    contractAddress: string,\n    tokenId: BigNumberish\n  ): Promise<NftAttributeRarity[]> {\n    return computeRarity(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * Refreshes the cached metadata for a provided NFT contract address and token\n   * id. Returns a boolean value indicating whether the metadata was refreshed.\n   *\n   * This method is useful when you want to refresh the metadata for a NFT that\n   * has been updated since the last time it was fetched. Note that the backend\n   * only allows one refresh per token every 15 minutes, globally for all users.\n   * The last refresh time for an NFT can be accessed on the\n   * {@link Nft.timeLastUpdated} field.\n   *\n   * To trigger a refresh for all NFTs in a contract, use {@link refreshContract} instead.\n   *\n   * @param contractAddress - The contract address of the NFT.\n   * @param tokenId - The token id of the NFT.\n   */\n  refreshNftMetadata(\n    contractAddress: string,\n    tokenId: BigNumberish\n  ): Promise<boolean> {\n    return refreshNftMetadata(this.config, contractAddress, tokenId);\n  }\n\n  /**\n   * Triggers a metadata refresh all NFTs in the provided contract address. This\n   * method is useful after an NFT collection is revealed.\n   *\n   * Refreshes are queued on the Alchemy backend and may take time to fully\n   * process. To refresh the metadata for a specific token, use the\n   * {@link refreshNftMetadata} method instead.\n   *\n   * @param contractAddress - The contract address of the NFT collection.\n   * @beta\n   */\n  refreshContract(contractAddress: string): Promise<RefreshContractResult> {\n    return refreshContract(this.config, contractAddress);\n  }\n}\n","import { AxiosRequestConfig, Method } from 'axios';\n\nimport { BigNumber } from '@ethersproject/bignumber';\n\nimport { requestHttpWithBackoff } from '../internal/dispatch';\nimport {\n  RawAddressActivityResponse,\n  RawCreateWebhookResponse,\n  RawGetAllWebhooksResponse,\n  RawNftFilterParam,\n  RawNftFiltersResponse,\n  RawWebhook\n} from '../internal/raw-interfaces';\nimport {\n  AddressActivityResponse,\n  AddressActivityWebhook,\n  AddressWebhookParams,\n  AddressWebhookUpdate,\n  DroppedTransactionWebhook,\n  GetAddressesOptions,\n  GetAllWebhooksResponse,\n  MinedTransactionWebhook,\n  Network,\n  NftActivityWebhook,\n  NftFilter,\n  NftFiltersResponse,\n  NftWebhookParams,\n  NftWebhookUpdate,\n  TransactionWebhookParams,\n  Webhook,\n  WebhookType,\n  WebhookVersion\n} from '../types/types';\nimport { AlchemyApiType } from '../util/const';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Notify namespace contains methods used for creating, reading, updating,\n * and deleting webhooks in the Notify API.\n *\n * To use the methods in the API, you must provide your team's auth token in the\n * {@link AlchemySettings.authToken} field when configuring\n * {@link AlchemySettings}. The auth token can be found in the Alchemy Dashboard\n * on the Notify tab.\n *\n * Note that not all networks are supported in the Notify API. Please consult\n * the documentation for which networks are supported.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the notify\n * namespace via `alchemy.notify`.\n */\nexport class NotifyNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Get all webhooks on your team.\n   *\n   * The team is determined by the `authToken` provided into the {@link AlchemySettings}\n   * object when creating a new {@link Alchemy} instance.\n   *\n   * This method returns a response object containing all the webhooks\n   */\n  async getAllWebhooks(): Promise<GetAllWebhooksResponse> {\n    this.verifyConfig();\n    const response = await this.sendWebhookRequest<RawGetAllWebhooksResponse>(\n      'team-webhooks',\n      'getAllWebhooks',\n      {}\n    );\n    return {\n      webhooks: parseRawWebhookResponse(response),\n      totalCount: response.data.length\n    };\n  }\n\n  /**\n   * Get all addresses tracked for the provided {@link AddressActivityWebhook}.\n   *\n   * @param addressWebhook The Address Activity webhook.\n   * @param options Pagination options when fetching addresses.\n   */\n  getAddresses(\n    addressWebhook: AddressActivityWebhook,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse>;\n\n  /**\n   * Get all addresses tracked for the provided {@link AddressActivityWebhook}.\n   *\n   * @param webhookId The id of the address activity webhook. Passing in an id\n   *   of a non-address-activity webhook will result in a response object with\n   *   no addresses.\n   * @param options Pagination options when fetching addresses.\n   */\n  getAddresses(\n    webhookId: string,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse>;\n  async getAddresses(\n    webhookOrId: AddressActivityWebhook | string,\n    options?: GetAddressesOptions\n  ): Promise<AddressActivityResponse> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawAddressActivityResponse>(\n      'webhook-addresses',\n      'getAddresses',\n      {\n        webhook_id: webhookId,\n        limit: options?.limit,\n        after: options?.pageKey\n      }\n    );\n    return parseRawAddressActivityResponse(response);\n  }\n\n  /**\n   * Get all NFTs tracked for the provided {@link NftActivityWebhook}.\n   *\n   * @param nftWebhook The NFT Activity webhook.\n   * @param options Pagination options when fetching NFT filters.\n   */\n  getNftFilters(\n    nftWebhook: NftActivityWebhook,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse>;\n\n  /**\n   * Get all NFT filters tracked for the provided {@link NftActivityWebhook}.\n   *\n   * @param webhookId The id of the NFT activity webhook. Passing in an\n   *   incorrect id of a non-NFT webhook will result in a response object with\n   *   no filters.\n   * @param options Pagination options when fetching nft filters.\n   */\n  getNftFilters(\n    webhookId: string,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse>;\n  async getNftFilters(\n    webhookOrId: NftActivityWebhook | string,\n    options?: GetAddressesOptions\n  ): Promise<NftFiltersResponse> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawNftFiltersResponse>(\n      'webhook-nft-filters',\n      'getNftFilters',\n      {\n        webhook_id: webhookId,\n        limit: options?.limit,\n        after: options?.pageKey\n      }\n    );\n    return parseRawNftFiltersResponse(response);\n  }\n\n  /**\n   * Update a {@link NftActivityWebhook}'s active status or NFT filters.\n   *\n   * @param nftWebhook The NFT activity webhook to update.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    nftWebhook: NftActivityWebhook,\n    update: NftWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link NftActivityWebhook}'s active status or NFT filters.\n   *\n   * @param nftWebhookId The id of the NFT activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(nftWebhookId: string, update: NftWebhookUpdate): Promise<void>;\n\n  /**\n   * Update a {@link AddressActivityWebhook}'s active status or addresses.\n   *\n   * @param addressWebhook The address activity webhook to update.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    addressWebhook: AddressActivityWebhook,\n    update: AddressWebhookUpdate\n  ): Promise<void>;\n\n  /**\n   * Update a {@link AddressActivityWebhook}'s active status or addresses.\n   *\n   * @param addressWebhookId The id of the address activity webhook.\n   * @param update Object containing the update.\n   */\n  updateWebhook(\n    addressWebhookId: string,\n    update: AddressWebhookUpdate\n  ): Promise<void>;\n  async updateWebhook(\n    webhookOrId: NftActivityWebhook | AddressActivityWebhook | string,\n    update: NftWebhookUpdate | AddressWebhookUpdate\n  ): Promise<void> {\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    let restApiName;\n    let methodName;\n    let method: Method;\n    let data;\n    if ('isActive' in update) {\n      restApiName = 'update-webhook';\n      methodName = 'updateWebhook';\n      method = 'PUT';\n      data = {\n        webhook_id: webhookId,\n        is_active: update.isActive\n      };\n    } else if ('addFilters' in update || 'removeFilters' in update) {\n      restApiName = 'update-webhook-nft-filters';\n      methodName = 'updateWebhookNftFilters';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        nft_filters_to_add: update.addFilters\n          ? update.addFilters.map(nftFilterToParam)\n          : [],\n        nft_filters_to_remove: update.removeFilters\n          ? update.removeFilters.map(nftFilterToParam)\n          : []\n      };\n    } else if ('addAddresses' in update || 'removeAddresses' in update) {\n      restApiName = 'update-webhook-addresses';\n      methodName = 'webhook:updateWebhookAddresses';\n      method = 'PATCH';\n      data = {\n        webhook_id: webhookId,\n        addresses_to_add: update.addAddresses ?? [],\n        addresses_to_remove: update.removeAddresses ?? []\n      };\n    } else if ('newAddresses' in update) {\n      restApiName = 'update-webhook-addresses';\n      methodName = 'webhook:updateWebhookAddress';\n      method = 'PUT';\n      data = {\n        webhook_id: webhookId,\n        addresses: update.newAddresses\n      };\n    } else {\n      throw new Error('Invalid `update` param passed into `updateWebhook`');\n    }\n\n    await this.sendWebhookRequest(\n      restApiName,\n      methodName,\n      {},\n      {\n        method,\n        data\n      }\n    );\n  }\n\n  /**\n   * Create a new {@link MinedTransactionWebhook} to track mined transactions\n   * sent by the app associated with the app id.\n   *\n   * Note that the webhook will be created in the app network of the provided app id.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the app id.\n   */\n  // TODO(webhook): Automatically populate app id from api key.\n  createWebhook(\n    url: string,\n    type: WebhookType.MINED_TRANSACTION,\n    params: TransactionWebhookParams\n  ): Promise<MinedTransactionWebhook>;\n\n  /**\n   * Create a new {@link DroppedTransactionWebhook} to track dropped transactions\n   * sent by the app associated with the app id.\n   *\n   * Note that the webhook will be created in the app network of the provided app id.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the app id.\n   */\n  // TODO(webhook): Automatically populate app id from api key.\n  createWebhook(\n    url: string,\n    type: WebhookType.DROPPED_TRANSACTION,\n    params: TransactionWebhookParams\n  ): Promise<DroppedTransactionWebhook>;\n\n  /**\n   * Create a new {@link NftActivityWebhook} to track NFT transfers.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the NFTs to track and the\n   *   network the webhook should be created on.\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.NFT_ACTIVITY,\n    params: NftWebhookParams\n  ): Promise<NftActivityWebhook>;\n\n  /**\n   * Create a new {@link AddressActivityWebhook} to track address activity.\n   *\n   * @param url The URL that the webhook should send events to.\n   * @param type The type of webhook to create.\n   * @param params Parameters object containing the addresses to track and the\n   *   network the webhook should be created on.\n   */\n  createWebhook(\n    url: string,\n    type: WebhookType.ADDRESS_ACTIVITY,\n    params: AddressWebhookParams\n  ): Promise<AddressActivityWebhook>;\n  async createWebhook(\n    url: string,\n    type: WebhookType,\n    params: NftWebhookParams | AddressWebhookParams | TransactionWebhookParams\n  ): Promise<\n    | MinedTransactionWebhook\n    | DroppedTransactionWebhook\n    | NftActivityWebhook\n    | AddressActivityWebhook\n  > {\n    let appId;\n    if (\n      type === WebhookType.MINED_TRANSACTION ||\n      type === WebhookType.DROPPED_TRANSACTION\n    ) {\n      if (!('appId' in params)) {\n        throw new Error('Transaction Webhooks require an app id.');\n      }\n      appId = params.appId;\n    }\n\n    let network = NETWORK_TO_WEBHOOK_NETWORK.get(this.config.network);\n    let filters;\n    let addresses;\n    if (type === WebhookType.NFT_ACTIVITY) {\n      if (!('filters' in params) || params.filters.length === 0) {\n        throw new Error(\n          'Nft Activity Webhooks require a non-empty array input.'\n        );\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      filters = (params.filters as NftFilter[]).map(filter => ({\n        contract_address: filter.contractAddress,\n        token_id: BigNumber.from(filter.tokenId).toString()\n      }));\n    } else if (type === WebhookType.ADDRESS_ACTIVITY) {\n      if (\n        params === undefined ||\n        !('addresses' in params) ||\n        params.addresses.length === 0\n      ) {\n        throw new Error(\n          'Address Activity Webhooks require a non-empty array input.'\n        );\n      }\n      network = params.network\n        ? NETWORK_TO_WEBHOOK_NETWORK.get(params.network)\n        : network;\n      addresses = params.addresses;\n    }\n\n    const data = {\n      network,\n      webhook_type: type,\n      webhook_url: url,\n      ...(appId && { app_id: appId }),\n\n      // Only include the filters/addresses in the final response if it's defined\n      ...(filters && { nft_filters: filters }),\n      ...(addresses && { addresses })\n    };\n\n    const response = await this.sendWebhookRequest<RawCreateWebhookResponse>(\n      'create-webhook',\n      'createWebhook',\n      {},\n      {\n        method: 'POST',\n        data\n      }\n    );\n\n    return parseRawWebhook(response.data);\n  }\n\n  /**\n   * Delete the provided webhook.\n   *\n   * @param webhook The webhook to delete.\n   */\n  deleteWebhook(webhook: Webhook): Promise<void>;\n\n  /**\n   * Delete the provided webhook.\n   *\n   * @param webhookId The id of the webhook to delete.\n   */\n  deleteWebhook(webhookId: string): Promise<void>;\n  async deleteWebhook(webhookOrId: Webhook | string): Promise<void> {\n    this.verifyConfig();\n    const webhookId =\n      typeof webhookOrId === 'string' ? webhookOrId : webhookOrId.id;\n    const response = await this.sendWebhookRequest<RawNftFiltersResponse>(\n      'delete-webhook',\n      'deleteWebhook',\n      {\n        webhook_id: webhookId\n      },\n      {\n        method: 'DELETE'\n      }\n    );\n\n    if ('message' in response) {\n      throw new Error(\n        `Webhook not found. Failed to delete webhook: ${webhookId}`\n      );\n    }\n  }\n\n  private verifyConfig() {\n    if (this.config.authToken === undefined) {\n      throw new Error(\n        'Using the Notify API requires setting the Alchemy Auth Token in ' +\n          'the settings object when initializing Alchemy.'\n      );\n    }\n  }\n\n  private sendWebhookRequest<Response>(\n    restApiName: string,\n    methodName: string,\n    params: {},\n    overrides?: AxiosRequestConfig\n  ): Promise<Response> {\n    return requestHttpWithBackoff(\n      this.config,\n      AlchemyApiType.WEBHOOK,\n      restApiName,\n      methodName,\n      params,\n      {\n        ...overrides,\n        headers: {\n          'X-Alchemy-Token': this.config.authToken!,\n          ...overrides?.headers\n        }\n      }\n    );\n  }\n}\n\n/**\n * Mapping of webhook network representations to the SDK's network representation.\n *\n * @internal\n */\nconst WEBHOOK_NETWORK_TO_NETWORK: { [key: string]: Network } = {\n  ETH_MAINNET: Network.ETH_MAINNET,\n  ETH_GOERLI: Network.ETH_GOERLI,\n  ETH_ROPSTEN: Network.ETH_ROPSTEN,\n  ETH_RINKEBY: Network.ETH_RINKEBY,\n  ETH_KOVAN: Network.ETH_KOVAN,\n  MATIC_MAINNET: Network.MATIC_MAINNET,\n  MATIC_MUMBAI: Network.MATIC_MUMBAI,\n  ARB_MAINNET: Network.ARB_MAINNET,\n  ARB_RINKEBY: Network.ARB_RINKEBY,\n  OPT_MAINNET: Network.OPT_MAINNET,\n  OPT_KOVAN: Network.OPT_KOVAN\n};\n\n/** Mapping of the SDK's network representation the webhook API's network representation. */\nconst NETWORK_TO_WEBHOOK_NETWORK: Map<Network, string> = Object.keys(\n  Network\n).reduce((map: Map<Network, string>, key) => {\n  if (key in WEBHOOK_NETWORK_TO_NETWORK) {\n    map.set(WEBHOOK_NETWORK_TO_NETWORK[key], key);\n  }\n  return map;\n}, new Map());\n\nfunction parseRawWebhookResponse(\n  response: RawGetAllWebhooksResponse\n): Webhook[] {\n  return response.data.map(parseRawWebhook);\n}\n\nfunction parseRawWebhook(rawWebhook: RawWebhook): Webhook {\n  return {\n    id: rawWebhook.id,\n    network: WEBHOOK_NETWORK_TO_NETWORK[rawWebhook.network],\n    type: rawWebhook.webhook_type as WebhookType,\n    url: rawWebhook.webhook_url,\n    isActive: rawWebhook.is_active,\n    timeCreated: new Date(rawWebhook.time_created).toISOString(),\n    signingKey: rawWebhook.signing_key,\n    version: rawWebhook.version as WebhookVersion,\n    // Only include the appId in the final response if it's defined\n    ...(rawWebhook.app_id !== undefined && { appId: rawWebhook.app_id })\n  };\n}\n\nfunction parseRawAddressActivityResponse(\n  response: RawAddressActivityResponse\n): AddressActivityResponse {\n  return {\n    addresses: response.data,\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\n\nfunction parseRawNftFiltersResponse(\n  response: RawNftFiltersResponse\n): NftFiltersResponse {\n  return {\n    filters: response.data.map(f => ({\n      contractAddress: f.contract_address,\n      tokenId: BigNumber.from(f.token_id).toString()\n    })),\n    totalCount: response.pagination.total_count,\n    pageKey: response.pagination.cursors.after\n  };\n}\n\nfunction nftFilterToParam(filter: NftFilter): RawNftFilterParam {\n  return {\n    contract_address: filter.contractAddress,\n    token_id: BigNumber.from(filter.tokenId).toString()\n  };\n}\n","import {\n  TransactionReceipt,\n  TransactionRequest,\n  TransactionResponse\n} from '@ethersproject/abstract-provider';\nimport type { BigNumber } from '@ethersproject/bignumber';\nimport { Deferrable } from '@ethersproject/properties';\n\nimport {\n  GasOptimizedTransactionResponse,\n  GasOptimizedTransactionStatusResponse,\n  SendPrivateTransactionOptions\n} from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { Wallet } from './alchemy-wallet';\nimport { fromHex, toHex } from './util';\n\n/**\n * Multiples to increment fee per gas when using\n * {@link TransactNamespace.sendGasOptimizedTransaction}.\n *\n * @internal\n */\nexport const GAS_OPTIMIZED_TX_FEE_MULTIPLES = [0.9, 1, 1.1, 1.2, 1.3];\n\n/**\n * The Transact namespace contains methods used for sending transactions and\n * checking on the state of submitted transactions.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the transact\n * namespace via `alchemy.transact`.\n */\nexport class TransactNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Used to send a single transaction to Flashbots. Flashbots will attempt to\n   * send the transaction to miners for the next 25 blocks.\n   *\n   * Returns the transaction hash of the submitted transaction.\n   *\n   * @param signedTransaction The raw, signed transaction as a hash.\n   * @param maxBlockNumber Optional highest block number in which the\n   *   transaction should be included.\n   * @param options Options to configure the request.\n   */\n  async sendPrivateTransaction(\n    signedTransaction: string,\n    maxBlockNumber?: number,\n    options?: SendPrivateTransactionOptions\n  ): Promise<string> {\n    const provider = await this.config.getProvider();\n    const hexBlockNumber = maxBlockNumber ? toHex(maxBlockNumber) : undefined;\n    return provider._send(\n      'eth_sendPrivateTransaction',\n      [\n        {\n          tx: signedTransaction,\n          maxBlockNumber: hexBlockNumber,\n          preferences: options\n        }\n      ],\n      'sendPrivateTransaction'\n    );\n  }\n\n  /**\n   * Stops the provided private transaction from being submitted for future\n   * blocks. A transaction can only be cancelled if the request is signed by the\n   * same key as the {@link sendPrivateTransaction} call submitting the\n   * transaction in first place.\n   *\n   * Please note that fast mode transactions cannot be cancelled using this method.\n   *\n   * Returns a boolean indicating whether the cancellation was successful.\n   *\n   * @param transactionHash Transaction hash of private tx to be cancelled\n   */\n  async cancelPrivateTransaction(transactionHash: string): Promise<boolean> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'eth_cancelPrivateTransaction',\n      [\n        {\n          txHash: transactionHash\n        }\n      ],\n      'cancelPrivateTransaction'\n    );\n  }\n\n  /**\n   * Returns the transaction with hash or null if the transaction is unknown.\n   *\n   * If a transaction has not been mined, this method will search the\n   * transaction pool. Various backends may have more restrictive transaction\n   * pool access (e.g. if the gas price is too low or the transaction was only\n   * recently sent and not yet indexed) in which case this method may also return null.\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.getTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to get.\n   * @public\n   */\n  async getTransaction(\n    transactionHash: string | Promise<string>\n  ): Promise<TransactionResponse | null> {\n    const provider = await this.config.getProvider();\n    return provider.getTransaction(transactionHash);\n  }\n\n  /**\n   * Submits transaction to the network to be mined. The transaction must be\n   * signed, and be valid (i.e. the nonce is correct and the account has\n   * sufficient balance to pay for the transaction).\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.sendTransaction}.\n   *\n   * @param signedTransaction The signed transaction to send.\n   * @public\n   */\n  async sendTransaction(\n    signedTransaction: string | Promise<string>\n  ): Promise<TransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider.sendTransaction(signedTransaction);\n  }\n\n  /**\n   * Returns an estimate of the amount of gas that would be required to submit\n   * transaction to the network.\n   *\n   * An estimate may not be accurate since there could be another transaction on\n   * the network that was not accounted for, but after being mined affects the\n   * relevant state.\n   *\n   * This is an alias for {@link CoreNamespace.estimateGas}.\n   *\n   * @param transaction The transaction to estimate gas for.\n   * @public\n   */\n  async estimateGas(\n    transaction: Deferrable<TransactionRequest>\n  ): Promise<BigNumber> {\n    const provider = await this.config.getProvider();\n    return provider.estimateGas(transaction);\n  }\n\n  /**\n   * Returns a fee per gas (in wei) that is an estimate of how much you can pay\n   * as a priority fee, or \"tip\", to get a transaction included in the current block.\n   *\n   * This number is generally used to set the `maxPriorityFeePerGas` field in a\n   * transaction request.\n   *\n   * @public\n   */\n  async getMaxPriorityFeePerGas(): Promise<number> {\n    const provider = await this.config.getProvider();\n    const feeHex = await provider._send(\n      'eth_maxPriorityFeePerGas',\n      [],\n      'getMaxPriorityFeePerGas'\n    );\n    return fromHex(feeHex);\n  }\n\n  /**\n   * Returns a promise which will not resolve until specified transaction hash is mined.\n   *\n   * If {@link confirmations} is 0, this method is non-blocking and if the\n   * transaction has not been mined returns null. Otherwise, this method will\n   * block until the transaction has confirmed blocks mined on top of the block\n   * in which it was mined.\n   *\n   * NOTE: This is an alias for {@link CoreNamespace.waitForTransaction}.\n   *\n   * @param transactionHash The hash of the transaction to wait for.\n   * @param confirmations The number of blocks to wait for.\n   * @param timeout The maximum time to wait for the transaction to confirm.\n   * @public\n   */\n  async waitForTransaction(\n    transactionHash: string,\n    confirmations?: number,\n    timeout?: number\n  ): Promise<TransactionReceipt | null> {\n    const provider = await this.config.getProvider();\n    return provider.waitForTransaction(transactionHash, confirmations, timeout);\n  }\n\n  /**\n   * Instead of sending a single transaction that might not get mined, this\n   * method allows you to send the same transaction multiple times, with\n   * different gas prices and gas limits. This should result in lower fees paid.\n   *\n   * Alchemy will submit the cheapest transaction, and if it does not get mined,\n   * the next cheapest transaction will be submitted. This process will continue\n   * until one of the transactions is mined, or until all transactions are rejected.\n   *\n   * To have Alchemy automatically generate a fee and gas spread, pass in a\n   * {@link TransactionRequest} object and a {@link Wallet} as a signer.\n   *\n   * This method returns a response object containing the transaction hash for\n   * each of the signed transactions and a transaction job id that can be used\n   * to track the state of the transaction job.\n   *\n   * @param signedTransactions An array of signed transactions to send. Each\n   *   transaction in the array must have the same values, but with different\n   *   gas and fee values.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async sendGasOptimizedTransaction(\n    signedTransactions: string[]\n  ): Promise<GasOptimizedTransactionResponse>;\n\n  /**\n   * Instead of sending a single transaction that might not get mined, this\n   * method will generate a series of five EIP-1559 transactions with different\n   * gas prices in order to minimize the final fees paid.\n   *\n   * Alchemy will submit the cheapest transaction, and if it does not get mined,\n   * the next cheapest transaction will be submitted. This process will continue\n   * until one of the transactions is mined, or until all transactions are rejected.\n   *\n   * To calculate the fee, gas, and gas spread for each transaction, this method\n   * first calculates the base fee from the latest block, estimates the gas for\n   * the transaction, and then calculates the fee and gas spread for the\n   * transaction. The five transactions will have 90%, 100%, 110%, 120%, and\n   * 130% of the max priority fee per gas.\n   *\n   * Note that you can also pass in an array of pre-signed transactions with set\n   * gas levels for more granular control over gas.\n   *\n   * This method returns a response object containing the transaction hash for\n   * each of the signed transactions and a transaction job id that can be used\n   * to track the state of the transaction job.\n   *\n   * @param transaction The raw transaction to send.\n   * @param wallet A wallet to use to sign the transaction.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async sendGasOptimizedTransaction(\n    transaction: TransactionRequest,\n    wallet: Wallet\n  ): Promise<GasOptimizedTransactionResponse>;\n  async sendGasOptimizedTransaction(\n    transactionOrSignedTxs: TransactionRequest | string[],\n    wallet?: Wallet\n  ): Promise<GasOptimizedTransactionResponse> {\n    if (Array.isArray(transactionOrSignedTxs)) {\n      return this._sendGasOptimizedTransaction(\n        transactionOrSignedTxs,\n        'sendGasOptimizedTransactionPreSigned'\n      );\n    }\n\n    let gasLimit;\n    let priorityFee;\n    let baseFee;\n    const provider = await this.config.getProvider();\n    try {\n      gasLimit = await this.estimateGas(transactionOrSignedTxs);\n      priorityFee = await this.getMaxPriorityFeePerGas();\n      const currentBlock = await provider.getBlock('latest');\n      baseFee = currentBlock.baseFeePerGas!.toNumber();\n    } catch (e) {\n      throw new Error(`Failed to estimate gas for transaction: ${e}`);\n    }\n\n    const gasSpreadTransactions = generateGasSpreadTransactions(\n      transactionOrSignedTxs,\n      gasLimit.toNumber(),\n      baseFee,\n      priorityFee\n    );\n    const signedTransactions = await Promise.all(\n      gasSpreadTransactions.map(tx => wallet!.signTransaction(tx))\n    );\n\n    return this._sendGasOptimizedTransaction(\n      signedTransactions,\n      'sendGasOptimizedTransactionGenerated'\n    );\n  }\n\n  /**\n   * Returns the state of the transaction job returned by the\n   * {@link sendGasOptimizedTransaction}.\n   *\n   * @param trackingId The tracking id from the response of the sent gas optimized transaction.\n   * @internal\n   */\n  // TODO(txjob): Remove internal tag once this feature is released.\n  async getGasOptimizedTransactionStatus(\n    trackingId: string\n  ): Promise<GasOptimizedTransactionStatusResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_getGasOptimizedTransactionStatus',\n      [trackingId],\n      'getGasOptimizedTransactionStatus'\n    );\n  }\n\n  /** @internal */\n  private async _sendGasOptimizedTransaction(\n    signedTransactions: string[],\n    methodName: string\n  ): Promise<GasOptimizedTransactionResponse> {\n    const provider = await this.config.getProvider();\n    return provider._send(\n      'alchemy_sendGasOptimizedTransaction',\n      [\n        {\n          rawTransactions: signedTransactions\n        }\n      ],\n      methodName\n    );\n  }\n}\n\n/**\n * Helper method to generate the raw transaction with the given gas limit and\n * priority fee across a spread of different gas prices.\n *\n * @internal\n */\n// Visible for testing\nexport function generateGasSpreadTransactions(\n  transaction: TransactionRequest,\n  gasLimit: number,\n  baseFee: number,\n  priorityFee: number\n): TransactionRequest[] {\n  return GAS_OPTIMIZED_TX_FEE_MULTIPLES.map(feeMultiplier => {\n    return {\n      ...transaction,\n      gasLimit,\n      maxFeePerGas: Math.round(\n        baseFee * feeMultiplier + priorityFee * feeMultiplier\n      ),\n      maxPriorityFeePerGas: Math.round(feeMultiplier * priorityFee)\n    };\n  });\n}\n","import type { Listener } from '@ethersproject/abstract-provider';\n\nimport { AlchemyEventType } from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * The Websocket namespace contains all subscription related functions that\n * allow you to subscribe to events and receive updates as they occur. The\n * underlying WebSocket provider has additional logic to handle reconnections\n * and automatically backfills missed events.\n *\n * Do not call this constructor directly. Instead, instantiate an Alchemy object\n * with `const alchemy = new Alchemy(config)` and then access the core namespace\n * via `alchemy.ws`.\n */\nexport class WebSocketNamespace {\n  /** @internal */\n  constructor(private readonly config: AlchemyConfig) {}\n\n  /**\n   * Adds a listener to be triggered for each {@link eventName} event. Also\n   * includes Alchemy's Subscription API events. See {@link AlchemyEventType} for\n   * how to use them.\n   *\n   * @param eventName The event to listen for.\n   * @param listener The listener to call when the event is triggered.\n   * @public\n   */\n  on(eventName: AlchemyEventType, listener: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      provider.on(eventName, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Adds a listener to be triggered for only the next {@link eventName} event,\n   * after which it will be removed. Also includes Alchemy's Subscription API\n   * events. See {@link AlchemyEventType} for how to use them.\n   *\n   * @param eventName The event to listen for.\n   * @param listener The listener to call when the event is triggered.\n   * @public\n   */\n  once(eventName: AlchemyEventType, listener: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      provider.once(eventName, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Removes the provided {@link listener} for the {@link eventName} event. If no\n   * listener is provided, all listeners for the event will be removed.\n   *\n   * @param eventName The event to unlisten to.\n   * @param listener The listener to remove.\n   * @public\n   */\n  off(eventName: AlchemyEventType, listener?: Listener): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      return provider.off(eventName, listener);\n    })();\n    return this;\n  }\n\n  /**\n   * Remove all listeners for the provided {@link eventName} event. If no event\n   * is provided, all events and their listeners are removed.\n   *\n   * @param eventName The event to remove all listeners for.\n   * @public\n   */\n  removeAllListeners(eventName?: AlchemyEventType): this {\n    void (async () => {\n      const provider = await this.config.getWebSocketProvider();\n      provider.removeAllListeners(eventName);\n    })();\n    return this;\n  }\n\n  /**\n   * Returns the number of listeners for the provided {@link eventName} event. If\n   * no event is provided, the total number of listeners for all events is returned.\n   *\n   * @param eventName The event to get the number of listeners for.\n   * @public\n   */\n  async listenerCount(eventName?: AlchemyEventType): Promise<number> {\n    const provider = await this.config.getWebSocketProvider();\n    return provider.listenerCount(eventName);\n  }\n\n  /**\n   * Returns an array of listeners for the provided {@link eventName} event. If\n   * no event is provided, all listeners will be included.\n   *\n   * @param eventName The event to get the listeners for.\n   */\n  async listeners(eventName?: AlchemyEventType): Promise<Listener[]> {\n    const provider = await this.config.getWebSocketProvider();\n    return provider.listeners(eventName);\n  }\n}\n","import { AlchemySettings } from '../types/types';\nimport { AlchemyConfig } from './alchemy-config';\nimport { CoreNamespace } from './core-namespace';\nimport { NftNamespace } from './nft-namespace';\nimport { NotifyNamespace } from './notify-namespace';\nimport { TransactNamespace } from './transact-namespace';\nimport { WebSocketNamespace } from './websocket-namespace';\n\n/**\n * The Alchemy SDK client. This class is the main entry point into Alchemy's\n * APIs and separates functionality into different namespaces.\n *\n * Each SDK instance is associated with a specific network and API key. To use a\n * different network or API key, create a new instance of {@link Alchemy}.\n *\n * @public\n */\nexport class Alchemy {\n  /**\n   * The `core` namespace contains the core eth json-rpc calls and Alchemy's\n   * Enhanced APIs.\n   */\n  readonly core: CoreNamespace;\n\n  /** The `nft` namespace contains methods for Alchemy's NFT API. */\n  readonly nft: NftNamespace;\n\n  /** The `ws` namespace contains methods for using WebSockets and creating subscriptions. */\n  readonly ws: WebSocketNamespace;\n\n  /**\n   * The `transact` namespace contains methods for sending transactions and\n   * checking on the state of submitted transasctions.\n   */\n  readonly transact: TransactNamespace;\n\n  /**\n   * Holds the setting information for the instance of the Alchemy SDK client\n   * and allows access to the underlying providers.\n   */\n  readonly config: AlchemyConfig;\n\n  /**\n   * The `notify` namespace contains methods for creating and managing webhooks\n   * as part of the Notify API.\n   */\n  readonly notify: NotifyNamespace;\n\n  /**\n   * @param {string} [settings.apiKey] - The API key to use for Alchemy\n   * @param {Network} [settings.network] - The network to use for Alchemy\n   * @param {number} [settings.maxRetries] - The maximum number of retries to attempt\n   * @public\n   */\n  constructor(settings?: AlchemySettings) {\n    this.config = new AlchemyConfig(settings);\n\n    this.core = new CoreNamespace(this.config);\n    this.nft = new NftNamespace(this.config);\n    this.ws = new WebSocketNamespace(this.config);\n    this.transact = new TransactNamespace(this.config);\n    this.notify = new NotifyNamespace(this.config);\n  }\n}\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar transitionalDefaults = require('../defaults/transitional');\nvar Cancel = require('../cancel/Cancel');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar normalizeHeaderName = require('../helpers/normalizeHeaderName');\nvar enhanceError = require('../core/enhanceError');\nvar transitionalDefaults = require('./transitional');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('../adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('../adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","module.exports = {\n  \"version\": \"0.26.1\"\n};","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return toString.call(val) === '[object URLSearchParams]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n"],"names":["getAlertUtilityClass","slot","generateUtilityClass","generateUtilityClasses","createSvgIcon","_jsx","d","_excluded","AlertRoot","styled","Paper","name","overridesResolver","props","styles","ownerState","root","variant","capitalize","color","severity","theme","getColor","palette","mode","darken","lighten","getBackgroundColor","_extends","typography","body2","backgroundColor","display","padding","vars","Alert","light","alertClasses","main","border","fontWeight","fontWeightMedium","dark","getContrastText","AlertIcon","icon","marginRight","fontSize","opacity","AlertMessage","message","minWidth","overflow","AlertAction","action","alignItems","marginLeft","defaultIconMapping","success","SuccessOutlinedIcon","warning","ReportProblemOutlinedIcon","error","ErrorOutlineIcon","info","InfoOutlinedIcon","React","inProps","ref","_components$CloseButt","_components$CloseIcon","useThemeProps","children","className","closeText","components","componentsProps","iconMapping","onClose","role","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","AlertCloseButton","CloseButton","IconButton","AlertCloseIcon","CloseIcon","_jsxs","elevation","clsx","size","title","onClick","closeButton","closeIcon","Network","TokenBalanceType","AssetTransfersCategory","AssetTransfersOrder","NftTokenType","NftSpamClassification","NftExcludeFilters","RefreshState","AlchemySubscription","GasOptimizedTransactionStatus","WebhookVersion","WebhookType","DEFAULT_ALCHEMY_API_KEY","DEFAULT_NETWORK","ETH_MAINNET","getAlchemyHttpUrl","network","apiKey","getAlchemyWsUrl","AlchemyApiType","EthersNetwork","ETH_ROPSTEN","ETH_GOERLI","ETH_KOVAN","ETH_RINKEBY","OPT_MAINNET","OPT_KOVAN","OPT_GOERLI","ARB_MAINNET","ARB_RINKEBY","ARB_GOERLI","MATIC_MAINNET","MATIC_MUMBAI","ASTAR_MAINNET","CustomNetworks","chainId","noop","AlchemyConfig","constructor","config","this","maxRetries","url","authToken","_getRequestUrl","apiType","undefined","NFT","WEBHOOK","getProvider","_baseAlchemyProvider","__awaiter","AlchemyProvider","getWebSocketProvider","_baseAlchemyWssProvider","AlchemyWebSocketProvider","fromHex","hexString","BigNumber","toNumber","toHex","num","toHexString","formatBlock","block","Number","isInteger","toString","getNftContractFromRaw","rawNftContract","address","contractMetadata","symbol","totalSupply","tokenType","parseNftTokenType","getBaseNftFromRaw","rawBaseNft","contractAddress","contract","tokenId","id","tokenMetadata","getNftFromRaw","rawNft","spamInfo","isSpam","classifications","parseSpamInfo","description","parseNftDescription","timeLastUpdated","metadataError","rawMetadata","metadata","tokenUri","parseNftTokenUri","media","parseNftTokenUriArray","getNftRarityFromRaw","rawNftRarity","map","prevalence","trait_type","value","traitType","ERC721","ERC1155","UNKNOWN","Array","isArray","join","JSON","stringify","uri","raw","length","gateway","arr","filter","IS_BROWSER","window","CoreNamespace","getBalance","addressOrName","blockTag","getCode","getStorageAt","position","getTransactionCount","getBlock","blockHashOrBlockTag","getBlockWithTransactions","getNetwork","getBlockNumber","getGasPrice","getFeeData","ready","call","transaction","estimateGas","getTransaction","transactionHash","getTransactionReceipt","sendTransaction","signedTransaction","waitForTransaction","confirmations","timeout","getLogs","send","method","params","findContractDeployer","provider","currentBlockNum","Error","firstBlock","binarySearchFirstBlock","txReceipts","getTransactionReceipts","blockNumber","matchingReceipt","receipts","find","receipt","toLowerCase","deployerAddress","from","getTokenBalances","contractAddressesOrOptions","_send","ERC20","type","pageKey","push","getTokenMetadata","getAssetTransfers","Object","fromBlock","toBlock","maxCount","start","end","mid","Math","floor","LogLevel","DEBUG","INFO","WARN","ERROR","SILENT","logLevelToConsoleFn","DEFAULT_LOG_LEVEL","logDebug","args","loggerClient","debug","logInfo","logWarn","warn","obj","e","logLevel","_logLevel","val","TypeError","_log","now","Date","toISOString","console","VERSION","sendAxiosRequest","baseUrl","restApiName","methodName","overrides","requestUrl","headers","axios","ExponentialBackoff","maxAttempts","backoff","numAttempts","Promise","reject","isInBackoff","backoffDelayWithJitterMs","withJitterMs","currentDelayMs","backoffMultiplier","max","initialDelayMs","min","maxDelayMs","resolve","setTimeout","delayMs","random","requestHttpWithBackoff","lastError","attempt","err","response","status","data","isRetryableHttpError","retryableCodes","includes","paginateEndpoint","reqPageKey","resPageKey","hasNext","requestParams","getNftMetadata","tokenUriTimeoutInMs","srcMethod","getNftsForOwner","owner","options","withMetadata","omitMetadataToWithMetadata","omitMetadata","contractAddresses","filters","excludeFilters","pageSize","ownedNfts","res","balance","parseInt","totalCount","refresh","refreshCache","nftFromGetNftResponse","ownedNft","isNftWithMetadata","nftFromGetNftNftContractResponse","parseReingestionState","reingestionState","DOES_NOT_EXIST","ALREADY_QUEUED","IN_PROGRESS","FINISHED","QUEUED","QUEUE_FAILED","NftNamespace","getContractMetadata","getNftsForOwnerIterator","getNftsForContract","startToken","limit","nfts","nextToken","getNftsForContractIterator","nft","getOwnersForContract","owners","ownerAddresses","getOwnersForNft","checkNftOwnership","verifyNftOwnership","result","reduce","acc","curr","isSpamContract","getSpamContracts","getFloorPrice","computeRarity","refreshNftMetadata","tokenIdString","first","second","refreshContract","refreshState","progress","NotifyNamespace","getAllWebhooks","verifyConfig","sendWebhookRequest","webhooks","parseRawWebhookResponse","getAddresses","webhookOrId","webhookId","addresses","pagination","total_count","cursors","after","parseRawAddressActivityResponse","webhook_id","getNftFilters","f","contract_address","token_id","parseRawNftFiltersResponse","updateWebhook","update","is_active","isActive","nft_filters_to_add","addFilters","nftFilterToParam","nft_filters_to_remove","removeFilters","addresses_to_add","addAddresses","addresses_to_remove","removeAddresses","newAddresses","createWebhook","appId","MINED_TRANSACTION","DROPPED_TRANSACTION","NETWORK_TO_WEBHOOK_NETWORK","get","NFT_ACTIVITY","ADDRESS_ACTIVITY","webhook_type","webhook_url","app_id","nft_filters","parseRawWebhook","deleteWebhook","WEBHOOK_NETWORK_TO_NETWORK","keys","key","set","Map","rawWebhook","timeCreated","time_created","signingKey","signing_key","version","GAS_OPTIMIZED_TX_FEE_MULTIPLES","TransactNamespace","sendPrivateTransaction","maxBlockNumber","hexBlockNumber","tx","preferences","cancelPrivateTransaction","txHash","getMaxPriorityFeePerGas","sendGasOptimizedTransaction","transactionOrSignedTxs","wallet","_sendGasOptimizedTransaction","gasLimit","priorityFee","baseFee","baseFeePerGas","gasSpreadTransactions","feeMultiplier","maxFeePerGas","round","maxPriorityFeePerGas","generateGasSpreadTransactions","signedTransactions","all","signTransaction","getGasOptimizedTransactionStatus","trackingId","rawTransactions","WebSocketNamespace","on","eventName","listener","once","off","removeAllListeners","listenerCount","listeners","Alchemy","settings","core","ws","transact","notify","module","exports","utils","require","settle","cookies","buildURL","buildFullPath","parseHeaders","isURLSameOrigin","createError","transitionalDefaults","Cancel","onCanceled","requestData","requestHeaders","responseType","done","cancelToken","unsubscribe","signal","removeEventListener","isFormData","request","XMLHttpRequest","auth","username","password","unescape","encodeURIComponent","Authorization","btoa","fullPath","baseURL","onloadend","responseHeaders","getAllResponseHeaders","responseText","statusText","open","toUpperCase","paramsSerializer","onreadystatechange","readyState","responseURL","indexOf","onabort","onerror","ontimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","isStandardBrowserEnv","xsrfValue","withCredentials","xsrfCookieName","read","xsrfHeaderName","forEach","setRequestHeader","isUndefined","onDownloadProgress","addEventListener","onUploadProgress","upload","cancel","abort","subscribe","aborted","bind","Axios","mergeConfig","createInstance","defaultConfig","context","instance","prototype","extend","create","instanceConfig","CancelToken","isCancel","promises","spread","isAxiosError","__CANCEL__","executor","resolvePromise","promise","token","then","_listeners","i","l","onfulfilled","_resolve","reason","throwIfRequested","index","splice","source","c","InterceptorManager","dispatchRequest","validator","validators","defaults","interceptors","configOrUrl","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","requestInterceptorChain","synchronousRequestInterceptors","interceptor","runWhen","synchronous","unshift","fulfilled","rejected","responseInterceptorChain","chain","apply","concat","shift","newConfig","onFulfilled","onRejected","getUri","replace","handlers","use","eject","fn","h","isAbsoluteURL","combineURLs","requestedURL","enhanceError","code","transformData","throwIfCancellationRequested","transformRequest","merge","common","adapter","transformResponse","toJSON","number","fileName","lineNumber","columnNumber","stack","config1","config2","getMergedValue","target","isPlainObject","slice","mergeDeepProperties","prop","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","configValue","validateStatus","fns","normalizeHeaderName","DEFAULT_CONTENT_TYPE","setContentTypeIfUnset","process","getDefaultAdapter","isArrayBuffer","isBuffer","isStream","isFile","isBlob","isArrayBufferView","buffer","isURLSearchParams","isObject","rawValue","parser","encoder","isString","parse","trim","stringifySafely","strictJSONParsing","maxContentLength","maxBodyLength","thisArg","arguments","encode","serializedParams","parts","v","isDate","hashmarkIndex","relativeURL","write","expires","path","domain","secure","cookie","isNumber","toGMTString","document","match","RegExp","decodeURIComponent","remove","test","payload","originURL","msie","navigator","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","charAt","location","requestURL","parsed","normalizedName","ignoreDuplicateOf","split","line","substr","callback","thing","deprecatedWarnings","formatMessage","opt","desc","opts","schema","allowUnknown","getPrototypeOf","isFunction","hasOwnProperty","ArrayBuffer","isView","pipe","product","assignValue","a","b","str","stripBOM","content","charCodeAt"],"sourceRoot":""}